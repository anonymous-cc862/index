当然，下面是**带止盈（Take Profit）、止损（Cut Loss）**、且在图上高亮所有关键信号点（开仓、平仓、止盈、止损）的完整回测代码，可直接运行：

```python
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# 假设 gold_df_test 已经筛选出来，且有 'date', 'ret', 'pred' 列
gold_df = gold_df_test.sort_values('date').reset_index(drop=True)
gold_df["px"] = (1 + gold_df["ret"]).cumprod()

# 回测初始参数
initial_capital = 1_000_000
nav = initial_capital
position = 0.0      # 仓位（持有的份额，可正可负）
cash = nav
holding = 0         # 1=long, -1=short, 0=空仓
window = 20

# 止盈/止损参数（可调）
take_profit = 0.08  # 止盈线（8%）
cut_loss = -0.04    # 止损线（-4%）

entry_price = None  # 记录建仓时的价格

records = []

for i in range(window, len(gold_df)-1):

    date = gold_df.loc[i, 'date']
    price = gold_df.loc[i, 'px']

    # 过去20天信号
    signal_hist = gold_df['pred'].iloc[i-window:i].dropna()
    if len(signal_hist) < window:
        continue

    mean_signal = signal_hist.mean()
    std_signal = signal_hist.std()
    today_signal = gold_df.loc[i, 'pred']

    signal_z = (today_signal - mean_signal) / (std_signal + 1e-8)
    scale = 1  # 可调

    action = 'hold'
    position_new = position

    # === 判断是否开仓/平仓/止盈/止损 ===
    if holding == 0:
        if today_signal >= mean_signal + 1 * std_signal:
            pos_ratio = np.tanh(scale * signal_z)
            position_new = (cash / price) * pos_ratio
            cash = cash - position_new * price
            holding = 1
            action = 'open_long'
            entry_price = price
        elif today_signal <= mean_signal - 1 * std_signal:
            pos_ratio = np.tanh(scale * signal_z)
            position_new = (cash / price) * pos_ratio
            cash = cash - position_new * price
            holding = -1
            action = 'open_short'
            entry_price = price

    elif holding > 0:  # 持有多仓
        pnl = (price - entry_price) / entry_price if entry_price else 0
        # 优先级：止盈/止损 > 信号反转
        if pnl >= take_profit:
            cash = cash + position * price
            position_new = 0.0
            holding = 0
            action = 'take_profit'
            entry_price = None
        elif pnl <= cut_loss:
            cash = cash + position * price
            position_new = 0.0
            holding = 0
            action = 'cut_loss'
            entry_price = None
        elif today_signal <= mean_signal - 0.8 * std_signal:
            cash = cash + position * price
            position_new = 0.0
            holding = 0
            action = 'close_long'
            entry_price = None

    elif holding < 0:  # 持有空仓
        pnl = (entry_price - price) / entry_price if entry_price else 0
        if pnl >= take_profit:
            cash = cash + position * price
            position_new = 0.0
            holding = 0
            action = 'take_profit'
            entry_price = None
        elif pnl <= cut_loss:
            cash = cash + position * price
            position_new = 0.0
            holding = 0
            action = 'cut_loss'
            entry_price = None
        elif today_signal >= mean_signal + 0.8 * std_signal:
            cash = cash + position * price
            position_new = 0.0
            holding = 0
            action = 'close_short'
            entry_price = None

    # 明日开盘计算NAV
    next_day_price = gold_df.loc[i+1, 'px']
    nav = cash + position_new * next_day_price

    records.append({
        'date': gold_df.loc[i+1, 'date'],
        'price': next_day_price,
        'signal': today_signal,
        'mean_signal': mean_signal,
        'std_signal': std_signal,
        'signal_z': signal_z,
        'position': position_new,
        'cash': cash,
        'nav': nav,
        'action': action
    })

    position = position_new

# 生成回测结果 DataFrame
bt_df = pd.DataFrame(records).set_index('date')

# buy-and-hold 基准
bt_df['buy_and_hold_nav'] = initial_capital * bt_df['price'] / bt_df['price'].iloc[0]

# === 评估表现 ===
bt_df['return'] = bt_df['nav'].pct_change().fillna(0)
bt_df['cum_return'] = (1 + bt_df['return']).cumprod()
bt_df['nav_peak'] = bt_df['nav'].cummax()
bt_df['drawdown'] = bt_df['nav'] / bt_df['nav_peak'] - 1
max_drawdown = bt_df['drawdown'].min()

bt_df['bh_return'] = bt_df['buy_and_hold_nav'].pct_change().fillna(0)
bt_df['bh_cum_return'] = (1 + bt_df['bh_return']).cumprod()
bt_df['bh_nav_peak'] = bt_df['buy_and_hold_nav'].cummax()
bt_df['bh_drawdown'] = bt_df['buy_and_hold_nav'] / bt_df['bh_nav_peak'] - 1
bh_max_drawdown = bt_df['bh_drawdown'].min()

days = len(bt_df)
annualized_return = (bt_df['nav'].iloc[-1] / bt_df['nav'].iloc[0]) ** (252 / days) - 1
sharpe_ratio = np.sqrt(252) * bt_df['return'].mean() / bt_df['return'].std()

bh_annualized_return = (bt_df['buy_and_hold_nav'].iloc[-1] / bt_df['buy_and_hold_nav'].iloc[0]) ** (252 / days) - 1
bh_sharpe_ratio = np.sqrt(252) * bt_df['bh_return'].mean() / bt_df['bh_return'].std()

# 输出表现
print("==== 策略表现 ====")
print(f"年化收益率:     {annualized_return:.2%}")
print(f"Sharpe比率:     {sharpe_ratio:.2f}")
print(f"最大回撤:       {max_drawdown:.2%}")

print("\n==== Buy-and-Hold 表现 ====")
print(f"年化收益率:     {bh_annualized_return:.2%}")
print(f"Sharpe比率:     {bh_sharpe_ratio:.2f}")
print(f"最大回撤:       {bh_max_drawdown:.2%}")

# === 绘图 ===
fig, ax = plt.subplots(figsize=(12, 6))
ax.plot(bt_df.index, bt_df['nav'], label='Strategy NAV', color='blue')
ax.plot(bt_df.index, bt_df['buy_and_hold_nav'], label='Buy-and-Hold NAV', color='orange', linestyle='--')

for idx, row in bt_df.iterrows():
    if row['action'] == 'open_long':
        ax.scatter(idx, row['nav'], marker='^', color='green', s=100, label='Long Entry')
    elif row['action'] == 'open_short':
        ax.scatter(idx, row['nav'], marker='v', color='red', s=100, label='Short Entry')
    elif row['action'] == 'take_profit':
        ax.scatter(idx, row['nav'], marker='P', color='gold', s=100, label='Take Profit')
    elif row['action'] == 'cut_loss':
        ax.scatter(idx, row['nav'], marker='X', color='purple', s=100, label='Cut Loss')
    elif 'close' in row['action']:
        ax.scatter(idx, row['nav'], marker='o', color='black', s=100, label='Exit')

# 去重 legend
handles, labels = ax.get_legend_handles_labels()
by_label = dict(zip(labels, handles))
ax.legend(by_label.values(), by_label.keys())

ax.set_title('Daily Dynamic Signal Backtest (Gold Theme)')
ax.set_xlabel('Date')
ax.set_ylabel('NAV')
ax.grid(True)
plt.tight_layout()
plt.show()
```

---

**说明：**

* 止盈/止损、信号反转都能触发平仓，action 字段会高亮记录。
* 图中：绿色^为多头开仓，红色v为空头开仓，金色P为止盈，紫色X为止损，黑色o为信号反转平仓。
* 止盈/止损优先于信号反转（如有不同需求可微调顺序）。
* 你只需要准备好`gold_df_test`即可直接运行。

如需调参、画额外指标、分析分布等，都可再补充！
