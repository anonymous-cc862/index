def backtest(self):
    port = {"cash": self.initial_capital, "pos": 0, "stop": 0, "tp": 0}
    log = []
    peak = self.initial_capital  # 历史高点
    in_drawdown = False
    drawdown_entry_peak = peak   # 熔断发生时的高点
    drawdown_trigger_nav = peak  # 熔断发生时的净值

    for dt, row in self.signals.iterrows():
        px, sig, atr = row["price"], row["signal"], row["ATR"]

        # 1. 计算账户净值
        nav = port["cash"] + port["pos"] * px
        log.append({"date": dt, "nav": nav})

        # 2. 记录高点
        if nav > peak:
            peak = nav

        # 3. 计算最大回撤
        drawdown = (peak - nav) / peak

        # 4. 熔断&冷静期处理
        if in_drawdown:
            # 熔断期内，只能平仓，不能新开仓
            if port["pos"] != 0 and (px <= port["stop"] or px >= port["tp"]):
                self._close(port, px)

            # 冷静期解除机制：净值恢复到“熔断高点-10%”以内
            recovery_drawdown = (drawdown_entry_peak - nav) / drawdown_entry_peak
            if recovery_drawdown <= 0.10:
                in_drawdown = False
                print(f"[恢复交易] {dt}，回撤已恢复至10%以内，解除熔断！")
            continue

        # 5. 熔断触发：超阈值立即平仓并熔断
        if drawdown > self.max_drawdown:
            if port["pos"] != 0:
                self._close(port, px)
            in_drawdown = True
            drawdown_entry_peak = peak      # 记录熔断高点
            drawdown_trigger_nav = nav      # 熔断时净值
            print(f"[熔断] {dt}，最大回撤超限，净值={nav:.2f}")
            continue

        # 6. 正常平仓
        if port["pos"] != 0 and (px <= port["stop"] or px >= port["tp"]):
            self._close(port, px)
        # 7. 正常开仓（熔断解除后才允许）
        if sig != 0 and port["pos"] == 0:
            self._open(port, sig, px, atr)

    self.results = pd.DataFrame(log).set_index("date")
    return self.results


#####
def backtest(self):
    port = {"cash": self.initial_capital, "pos": 0, "stop": 0, "tp": 0}
    log = []
    for dt, row in self.signals.iterrows():
        px, sig, atr = row["price"], row["signal"], row["ATR"]

        # === 平仓条件 ===
        if port["pos"] != 0 and (px <= port["stop"] or px >= port["tp"]):
            self._close(port, px)
        
        # === 加仓/减仓 ===
        if sig != 0:
            if port["pos"] == 0:
                # 原来空仓，直接建新仓
                self._open(port, sig, px, atr)
            elif np.sign(sig) == np.sign(port["pos"]):
                # 持仓方向与信号同向，加仓
                self._add_position(port, sig, px, atr)
            elif np.sign(sig) != np.sign(port["pos"]):
                # 信号反向，减仓或反手
                self._reduce_or_reverse(port, sig, px, atr)
        
        nav = port["cash"] + port["pos"] * px
        log.append({"date": dt, "nav": nav, "pos": port["pos"]})
    self.results = pd.DataFrame(log).set_index("date")
    return self.results

def _add_position(self, port, sig, px, atr):
    # 新加一笔同样大小仓位，但需检查资金上限
    size = self._position_size(px, port["cash"])
    if size == 0:
        return  # 没钱了不加
    fee = px * size * (self.cost["c"] + self.cost["s"] + (self.cost["t"] if sig > 0 else 0))
    port["cash"] -= fee
    port["pos"] += size if sig > 0 else -size  # 累加持仓
    # 可选：加仓后，重设止损/止盈（比如按加权成本价/新ATR等）
    port["stop"] = px - 2 * atr if port["pos"] > 0 else px + 2 * atr
    port["tp"] = px + 3 * atr if port["pos"] > 0 else px - 3 * atr

def _reduce_or_reverse(self, port, sig, px, atr):
    # 简单实现：遇到反向信号时直接全部平仓，然后用新信号反手
    self._close(port, px)
    self._open(port, sig, px, atr)
    # 如果你想“只减仓一半”，可以把加仓代码写成：
    # reduce_size = min(abs(port["pos"]), self._position_size(px, port["cash"]))
    # port["pos"] += reduce_size * np.sign(sig)
    # （复杂处理可单独实现，有需要可以继续问）
