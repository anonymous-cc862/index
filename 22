#!
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates         
from pathlib import Path
from matplotlib.lines import Line2D


def rolling_r2(x: np.ndarray | list[float]) -> float:

    """

    对输入窗口 x（长度 N）的序列做一元线性回归，

    返回回归的决定系数 R²，衡量"线性拟合好坏"，

    越接近 1 越说明这一段价格接近直线（趋势更明确）。

    """

    y = np.asarray(x)

    t = np.arange(len(y))            # 自变量 0,1,2,…,N-1

    # 最小二乘直线系数

    beta1, beta0 = np.polyfit(t, y, 1)

    y_hat = beta1 * t + beta0        # 拟合值

    ss_tot = np.sum((y - y.mean())**2) + 1e-9   # 加 eps 防 0

    ss_res = np.sum((y - y_hat) ** 2)

    return 1.0 - ss_res / ss_tot

class EnhancedTimingStrategy:
    def __init__(self, daily_returns: pd.Series):
        self.price = self._to_price(daily_returns).rename("price").to_frame()

        # === 其余原有参数不变 ===
        self.initial_capital = 1_000_000
        self.initial_nav     = self.initial_capital
        self.cost            = {"c": 0.001, "s": 0.0, "t": 0.0}

        # # --- 新增 / 必要参数 ---
        # self.lookback_r      = 3     # 收益率窗口（≈一周）
        # self.lookback_slope  = 7      # 线性回归窗口
        # self.ema_short       = 3
        # self.ema_long        = 10
        # self.ens_weights     = (1, 0, 0)#(0.5, 0.3, 0.2)  # r5_z, slope7_z, ema_ratio_z 权重
        # --- Parameters for existing and new signals ---
        self.lookback_slope = 7      # Slope7: 线性回归窗口 (Retained)
        
        # Parameters for EMA Crossover Signal (using existing self.ema_short/long)
        self.ema_short_period = 5    # Was self.ema_short
        self.ema_long_period = 30    # Was self.ema_long
        
        # Parameters for ROC with MA Filter Signal
        self.roc_period = 5#10
        self.roc_buy_thresh = 1.0#2.0
        self.roc_sell_thresh = -1 #0.0
        self.roc_ma_filter_period = 10

        # Weights for the three signals in the ensemble:
        # (EMA_Crossover_Z, Slope7_Z, ROC_MA_Filter_Z)
        self.ens_weights = (0, 0,1) # Example: (weight_ema_cross, weight_slope7, weight_roc_ma)
        # 下面保留原有 risk、vol、ATR 等参数（如有需要可删减）
        self.base_risk = 0.15
        self.stop_atr  = 5
        self.max_drawdown       = 0.4
        self.resume_drawdown    = 0.1
        self.circuit_breaker    = False
        self.stoploss_atr       = 2 #5#2#1
        self.takeprofit_atr     = 5 #6#4#2
        self.cooldown_period    = 5

        self.rsi_lookback=5
        self.pct_window         = 30


        self.low_vol_low        = 0.2
        self.high_vol_high      = 0.8
        #self.MAX_WINDOW         = 120


        
        self.RSI_pct_high=0.9
        self.RSI_pct_low=0.1

        self.rv_scale_window=21
        # self.ensemble_high=0.2#1#0.3
        # self.ensemble_low=-0.2#1#0.3
        self.ensemble_high=0.5#0.1#0.3
        self.ensemble_low=-0.5#-0.7#-0.1#1#

        self.slope7_threshold=0



    # ---------- helpers ----------
    @staticmethod
    def _to_price(r: pd.Series) -> pd.Series:

        r = r.clip(-0.1, 0.1).replace(0, 1e-6)

        return 100 * (1 + r).cumprod()

    # ---------- indicators ----------

    def calc_indicators(self):

        df = self.price

        df["EMA100"] = df["price"].ewm(span=60, adjust=False).mean()
        # 可以再计算EMA的斜率，例如简单用 diff()
        #df["EMA100_slope"] = df["EMA100"].diff()
        df["EMA100_slope"] = (df["EMA100"].rolling(5).apply(lambda x: np.polyfit(range(5), x, 1)[0]))
        df["EMA100_slope_pct"]=df['EMA100_slope'].rolling(self.pct_window).rank(pct=True)

#rsi
        delta = df["price"].diff()
        # gain, loss = delta.clip(lower=0), -delta.clip(upper=0)
        # rs = gain.rolling(self.rsi_lookback).mean() / (loss.rolling(self.rsi_lookback).mean() + 1e-9)
        # df["RSI"] = 100 - 100 / (1 + rs)

        gain, loss = delta.clip(lower=0), -delta.clip(upper=0)
        #gain_avg=gain.ewm(span=self.rsi_lookback).mean
        rs = gain.ewm(span=self.rsi_lookback).mean() / (loss.ewm(span=self.rsi_lookback).mean() + 1e-9)
        df["RSI"] = 100 - 100 / (1 + rs)

        # ===== (保留原来的波动率、ATR 等，如仍有需要) =====

        df["ATR"]   = df["price"].diff().abs().ewm(span=14, adjust=False).mean()

        df["RV14"]  = np.log(df["price"]).diff().rolling(14).std() #
        df['RV_pct']  = df['RV14'].rolling(self.pct_window).rank(pct=True)#60-day rolling window quantiles  
        df["VOL_FLOOR"] = df["RV14"].rolling(self.pct_window).quantile(0.20)
        df["VOL_CAP"]   = df["RV14"].rolling(self.pct_window).quantile(0.80)
        df["RSI_pct"] = df["RSI"].rolling(self.pct_window).rank(pct=True)
        # 丢掉暖机期

        self.df = df.dropna().copy()

        # 添加价格合理性检查
        assert not df["price"].isnull().any(), "存在缺失价格数据"
        assert (df["price"] > 0).all(), "存在非正价格"
        return df


    # ---------- generate_signals ----------

    def generate_signals(self):

        df = self.df.copy()

        df["R2_60"] = df["price"].rolling(60).apply(rolling_r2)

        is_uptrend  = (df["price"] > df["EMA100"]) & (df["R2_60"] > 0.6)

        is_downtrend= (df["price"] < df["EMA100"]) & (df["R2_60"] > 0.6)

        # 趋势判断条件 (示例)df["EMA100_slope_pct"]
        # is_uptrend = (df["price"] > df["EMA100"]) & (df["EMA100_slope_pct"] > 0.7)
        # is_downtrend = (df["price"] < df["EMA100"]) & (df["EMA100_slope_pct"] < 0.3)
        is_ranging = ~(is_uptrend | is_downtrend) # 简单定义为非趋势
        
                # 默认无信号
        df["raw_sig"] = 0

        # 2-A 顺势动量
        df.loc[is_uptrend,   "raw_sig"] =  1          # 只做多
        df.loc[is_downtrend, "raw_sig"] = -1          # 只做空



        # 根据趋势调整信号
        # # 在上升趋势中，只考虑做多
        # df.loc[is_uptrend & (df["RSI_pct"] < self.RSI_pct_low), "raw_sig"] = 1
        # # 在上升趋势中，非常谨慎地做空或不做空
        # # df.loc[is_uptrend & (df["RSI_pct"] > AN_EVEN_HIGHER_RSI_PCT_HIGH), "raw_sig"] = -1 # 或者直接注释掉这行

        # # 在下降趋势中，只考虑做空
        # df.loc[is_downtrend & (df["RSI_pct"] > self.RSI_pct_high), "raw_sig"] = -1
        # 在下降趋势中，非常谨慎地做多或不做多

        # 在震荡市中，使用原有逻辑
        df.loc[is_ranging & (df["RSI_pct"] < self.RSI_pct_low), "raw_sig"] = 1
        df.loc[is_ranging & (df["RSI_pct"] > self.RSI_pct_high), "raw_sig"] = -1

        df["trend_flag"] = 0

        df.loc[is_uptrend,  "trend_flag"] =  1    # 上升趋势

        df.loc[is_downtrend,"trend_flag"] = -1    # 下降趋势



        # # +1 / -1 / 0（三态）信号


        # df["raw_sig"] = np.select(

        #     [df["RSI_pct"] > self.RSI_pct_high, ###@@

        #      df["RSI_pct"] < self.RSI_pct_low],
        #     [-1, 1],
        #     0
        # )

        # 只有发生翻转时才触发交易（去抖）
       # Only fire on 0→±1 or ±1→∓1 transition
        df["signal"] = df["raw_sig"].where(
            df["raw_sig"].shift(fill_value=0) != df["raw_sig"], 0
        )

        self.signals =  df[["price", "signal", "trend_flag", 'RV14', 'VOL_FLOOR', 'VOL_CAP']] 
        print(df["signal"].value_counts())
        print("backtest start:", self.signals.index[0])
        self.signals["signal_trade"] = self.signals["signal"].shift(1).fillna(0) #用前一天的signal做后一天的执行
       #self.signals["action_trade"] = self.signals["action"].shift(1).fillna(0) #用前一天的signal做后一天的执行
        self.signals["rv_trade"]     = self.signals["RV14"].shift(1).fillna(method='bfill')
        self.signals["floor_trade"]  = self.signals["VOL_FLOOR"].shift(1).fillna(method='bfill')
        self.signals["cap_trade"]    = self.signals["VOL_CAP"].shift(1).fillna(method='bfill')
        return self.signals



    # ----------- backtest ----------
    #T+1     
    def backtest(self):
        running_max = self.initial_capital
        locked = False
        port = {"cash": self.initial_capital, "pos": 0, "stop": 0, "tp": 0,  "half_exit": False,  "trail": 0 , "max_entry": None, 
    "min_entry": None}  
        log = []
        cooldown = 0
        for i, (dt, row) in enumerate(self.signals.iterrows()):
            px= row["price"]
            sig = row["signal_trade"] #, row["signal"]#, row["ATR"]
            #act = row["action_trade"]          # "close" / "open" / "hold"
            rv    = row["rv_trade"]
            floor = row["floor_trade"]
            cap   = row["cap_trade"]

            # # ---------- 先处理 close-only ----------

            # if act == "close" and port["pos"] != 0:

            #     self._close(port, px)

            #     nav = port["cash"] + port["pos"] * px

            #     log.append({"date": dt, "nav": nav, "pos": 0, "signal": 0})

            #     continue                       # 今天已平仓，不再进入开仓分支


            # ---------- Stop loss closing----------
            if (port["pos"]>0 and px <= port["stop"]) or (port["pos"]<0 and px >= port["stop"]):
                print("Stop loss closing")
                self._close(port, px) #If the stop loss line is reached → all positions are closed, commissions are settled, and no further reversals are allowed on the same day
                print(f"close again print******* half:  pos={port['pos']}, cash={port['cash']}, nav={nav}, px={px}, stop={port['stop']}, tp={port['tp']}")
                    
                nav  = port["cash"] + port["pos"] * px
                print(f"nav={nav}")
                sig = 0 # The position has been closed on the day and no position will be opened later
                log.append({"date": dt, "nav": nav, "pos": port["pos"], "signal": sig})              
                continue
            
            # ---------- Trailing Stop Loss----------
            if port["pos"] != 0 and port["half_exit"]:
                print("Trailing Stop Loss")
                self._update_trail(port, px, rv) #更新stop 

            # # ===  Take profit in batches: close half of the position when it reaches ±3×ATR ===
            if port["pos"] != 0 and not port["half_exit"]:
                reach_tp = (port["pos"]>0 and px >= port["tp"]) or (port["pos"]<0 and px <= port["tp"])
                if reach_tp:
                    half = abs(port["pos"]) // 2
                    print("Take profit in batches")
                    if half:   #half非0              
                        fee = px*half*(self.cost["c"]+self.cost["s"]+(self.cost["t"] if port["pos"]>0 else 0))
                        port["cash"] += half*px-fee if port["pos"]>0 else  -half*px-fee  #half*px - fee if port["pos"]>0 else  -half*px - fee
                        port["pos"]  += -half if port["pos"]>0 else  half
                        port["half_exit"] = True
                        port["trail"] = px # Trailing stop loss starting point, set trail to the current price
                        nav=port["cash"] + port["pos"] * px
                        print(f"half:  pos={port['pos']}, cash={port['cash']}, nav={nav}, px={px}, stop={port['stop']}, tp={port['tp']}")
            
            # ===Opening / Adding / Reversing ===
            nav  = port["cash"] + port["pos"] * px
            if sig != 0 and not locked:
                if port["pos"] == 0: 
                    print("open")
                    nav  = port["cash"] + port["pos"] * px
                    self._open(port, sig, px, rv, i, floor, cap, nav)
                    print(f"open again print******* half:  pos={port['pos']}, cash={port['cash']}, nav={nav}, px={px}, stop={port['stop']}, tp={port['tp']}")
                    
                elif np.sign(sig) == np.sign(port["pos"]): #Add positions in the same direction
                    print('add')
                    nav  = port["cash"] + port["pos"] * px
                    self._add_position(port, sig, px, rv, i, floor, cap, nav)
                    print(f"add_position again print ***** *Open: pos={port['pos']}, cash={port['cash']}, nav={nav}, px={px}, stop={port['stop']}, tp={port['tp']}")
                    
                else: #sig!=0, pos!=0, sig gives the opposite signal to pos # Reverse → Close the position and reverse
                    print("reverse")
                    nav  = port["cash"] + port["pos"] * px
                    self._reduce_or_reverse(port, sig, px, rv, i, floor, cap, nav)
                    print(f"_reduce_or_reverse again print***** Open: pos={port['pos']}, cash={port['cash']}, nav={nav}, px={px}, stop={port['stop']}, tp={port['tp']}")
                # When encountering a reverse signal, close all positions directly, and then use the new signal to reverse

            nav = port["cash"] + port["pos"] * px
            running_max = max(running_max, nav)

            # --- tripping ---
            if not locked and nav <= running_max * (1 - self.max_drawdown): #
                print("tripping")
                self._close(port, px)      # all close
                locked = True
                cooldown = self.cooldown_period
                locked_peak = running_max   
                running_max = nav           # new baseline nav = running_max

            # --- lock period ---
            if locked:
                print("locked")
                if cooldown > 0:
                    cooldown -= 1
                    log.append({"date": dt, "nav": nav, "pos": port["pos"], "signal": sig})
                    continue  
                else: 
                    locked = False
                    running_max = nav
            log.append({"date": dt, "nav": nav, "pos": port["pos"],     "price": px,
                        "signal": sig})  #

            assert np.isclose(nav, port['cash']+port['pos']*px), 'NAV incorrect'

        #end for loop
        self.results = pd.DataFrame(log).set_index("date")
        self.results["trend_flag"] = self.signals["trend_flag"].reindex(self.results.index)

        # ---------- Trading position holding time statistics ----------
        trades, pos, entry_date = [], 0, None
        for dt, row in self.results.iterrows():
            if pos == 0 and row["pos"] != 0:            
                pos, entry_date = row["pos"], dt
            elif pos != 0 and row["pos"] == 0:          
                trades.append((entry_date, dt, (dt - entry_date).days))
                pos = 0
        if trades:                                     
            lengths = [t[2] for t in trades]
            print(f"Average holding days: {np.mean(lengths):.1f}  "
                f"median: {np.median(lengths):.1f}  "
                f"shortest: {np.min(lengths)}  longest: {np.max(lengths)}")
        else:
            print("The current parameter combination does not generate a complete transaction record")    
        return self.results

    def _update_trail(self, port, px, rv):
        if port["pos"] > 0:
            port["trail"] = max(port["trail"], px)
            port["stop"]  = max(port["stop"], port["trail"] - self.stoploss_atr*rv*px)  # stop 只能上移
        elif port["pos"] < 0:
            port["trail"] = min(port["trail"], px)
            port["stop"]  = min(port["stop"], port["trail"] + self.stoploss_atr*rv*px)  # stop 只能下移
        print(f"update_trail: stop: {port['stop']}")

    # ---------- position ----------
    def _position_size(self, px, rv, nav, bar_idx, floor, cap, port):
        rv = np.clip(rv, floor, cap)
        risk_base   = min(nav, port["cash"])  
        risk_dollar = risk_base * self.base_risk 

        # risk_frac   = self.base_risk
        # risk_dollar = nav * risk_frac #min(nav, self.initial_nav) * risk_frac

        per_unit_risk = self.stop_atr * rv * px #Estimated loss per lot
        if per_unit_risk == 0:
            return 0

        size_by_risk = risk_dollar / per_unit_risk #Amount of loss you can afford (0.25% of NAV) ÷ 1 unit loss = Number of units invested, i.e. size, shares
# e.g. - 首次做空，价  100 → per_unit_risk  = 2 × 0.01 × 100 = 2 
#   - size = 2 500 / 2 = 1 250 股，名义 = 125 000， 超额 
        size_cap     = risk_base  // px
        print(f"rv:{rv}, nav: {nav}; cash: {port['cash']}; size_by_risk: {size_by_risk}; size_cap:{size_cap}")
        return int(max(0, min(size_by_risk, size_cap)))
    
    def _add_position(self, port, sig, px, rv, bar_idx, floor, cap, nav):
        # Add a new position, based on the capital limit and maximum loss capital
        size = self._position_size(px, rv, nav, bar_idx, floor, cap, port) #port["cash"] * self.max_single是最多投多少资金，除以价格是最多持仓  /  最大亏损资金（port["cash"] *最大亏损比例）/价格=持仓，再除以2风控常数，不能多于这个持仓,二者最小
        #cap_left = nav - abs(port["pos"] * px)     
        # size_cap = cap_left // px
        # size = int(min(size, size_cap))

        if size == 0:
            return  # No money, no add
        fee = px * size * (self.cost["c"] + self.cost["s"] + (self.cost["t"] if sig > 0 else 0))
        if sig > 0:                  # 做多
            port["cash"] -= size * px
        else:                        # 做空
            port["cash"] += size * px
   
        port["cash"] -= fee
        port["pos"] += size if sig > 0 else -size  # Accumulated positions

        print(f"add_position first print **** Open: size: {size}, pos={port['pos']}, cash={port['cash']}, nav={nav}, px={px}, stop={port['stop']}, tp={port['tp']}")
        # After adding positions, reset stop loss/take profit
        if sig>0:
            port["max_entry"] =px if port["max_entry"] is None else max(port["max_entry"], px)
            port["min_entry"] =px if port["min_entry"] is None else min(port["min_entry"], px)
 # 1) stop 只能上移：用"历史最高价 - 2ATR"与旧 stop 取最大
            new_stop=port["max_entry"] - self.stoploss_atr * rv * port["max_entry"]
            port["stop"] = max(port["stop"], new_stop) if port["stop"] else new_stop
            
            # 2) tp 只能外推：用"历史最低价 + 6ATR"与旧 tp 取最小
            new_tp = port["min_entry"] + self.takeprofit_atr * rv * port["min_entry"]
            port["tp"] = min(port["tp"], new_tp) if port["tp"] else new_tp
        else:        # ----------- 空头 -----------
            port["min_entry"] = px if port["min_entry"] is None else min(port["min_entry"], px)
            port["max_entry"] = px if port["max_entry"] is None else max(port["max_entry"], px)

            new_stop = port["min_entry"] + self.stoploss_atr * rv * port["min_entry"]
            port["stop"] = min(port["stop"], new_stop) if port["stop"] else new_stop

            new_tp = port["max_entry"] - self.takeprofit_atr * rv * port["max_entry"]
            port["tp"] = max(port["tp"], new_tp) if port["tp"] else new_tp

        port["half_exit"] = False  

    def _reduce_or_reverse(self, port, sig, px, rv, bar_idx, floor, cap, nav):
        # When encountering a reverse signal, close all positions directly, and then use the new signal to reverse
        self._close(port, px)
        nav_after_close = port["cash"]
        #long，close，nav=nav
        self._open(port, sig, px, rv, bar_idx, floor, cap, nav_after_close)
        # 如果“只减仓一半”，加仓代码写成：
        # reduce_size = min(abs(port["pos"]), self._position_size(px, port["cash"]))
        # port["pos"] += reduce_size * np.sign(sig)
        print(f"Open: pos={port['pos']}, cash={port['cash']}, nav={nav_after_close}, px={px}, stop={port['stop']}, tp={port['tp']}")
        
    # ---------- open----------
    def _open(self, port, sig, px, rv, bar_idx, floor, cap, nav):
        size = self._position_size(px, rv, nav, bar_idx,floor, cap, port)
        fee = px * size * (self.cost["c"] + self.cost["s"] + (self.cost["t"] if sig > 0 else 0))
        if sig > 0:                  # 做多
            port["cash"] -= size * px
        else:                        # 做空
            port["cash"] += size * px
   
        port["cash"] -= fee
        print(f"!!!!! size:{size}, pos:{port['pos']}")
        port["pos"] = size if sig > 0 else -size

        port["entry"]      = px                 # Record opening price
        port["half_exit"]  = False              
        port["trail"]      = px                 
        port["stop"] = px - self.stoploss_atr * rv *px if sig > 0 else px + self.stoploss_atr * rv*px
        port["tp"] = px + self.takeprofit_atr * rv *px if sig > 0 else px - self.takeprofit_atr * rv*px
        
        print(f"Open: sig: {sig}, pos={port['pos']}, cash={port['cash']}, nav={nav}, px={px}, stop={port['stop']}, tp={port['tp']}")

    def _close(self, port, px): 
        if port["pos"] > 0:  # 多头平仓
            value = port["pos"] * px
            fee = abs(value) * (self.cost["c"] + self.cost["s"] + self.cost["t"])
            port["cash"] += value - fee
        elif port["pos"] < 0:  # 空头平仓
            value = abs(port["pos"]) * px
            fee = value * (self.cost["c"] + self.cost["s"])  # 空头买回无需额外t成本
            port["cash"] -= value - fee #+ fee
    
        port.update({"pos":0, "stop":0, "tp":0, "half_exit":False, "trail":0})
        print(f"Close: pos={port['pos']}, cash={port['cash']},  px={px}, stop={port['stop']}, tp={port['tp']}")

    # ---------- performance ---------- 
    def performance (self,save_path: Path | None = None, plot_trades: bool = True):
        ret = self.results["nav"].pct_change().dropna()
        ann_ret = (self.results["nav"].iloc[-1] / self.results["nav"].iloc[0]) ** (252 / len(self.results)) - 1 #ret??
        sharpe = (ret.mean() / ret.std()) * np.sqrt(252) if ret.std() else 0
        dd = (self.results["nav"].cummax() - self.results["nav"]) / self.results["nav"].cummax()
        print(f"Ann return: {ann_ret:.2%};  Sharpe: {sharpe:.2f};  MaxDD: {dd.max():.2%}")

        # -------- NAV  + Benchmark --------
        nav_norm = self.results["nav"] / self.results["nav"].iloc[0]
        bm_norm  = (self.price["price"].reindex(self.results.index)
                            / self.price["price"].reindex(self.results.index).iloc[0])

        fig, ax1 = plt.subplots(figsize=(12, 5))
        ax1.plot(nav_norm, label="Strategy NAV", color="steelblue")
        ax1.plot(bm_norm,  label="Benchmark",     color="gray", alpha=0.6)

        
                # -------- ① 给趋势段着色 --------

        trend = self.results["trend_flag"].fillna(0)

        def shade_zone(cond, color, alpha):

            """把满足 cond 的连续日期段用 axvspan 着色"""

            blocks = (cond != cond.shift()).cumsum()

            for _, grp in trend[cond].groupby(blocks):

                ax1.axvspan(grp.index[0], grp.index[-1],

                            color=color, alpha=alpha, zorder=-2)

        shade_zone(trend== 1, "limegreen", 0.10)   # 上升段：浅绿

        shade_zone(trend==-1, "tomato",    0.10)   # 下降段：浅红

        shade_zone(trend== 0, "gold",      0.06)   # 震荡段：浅黄  (可选)

        

        ax1.set_ylabel("Normalized NAV", color="steelblue")
        ax1.tick_params(axis="y", labelcolor="steelblue")


        # -------- marker --------
        if plot_trades:
            long_idx   = self.results.index[self.results["signal"] ==  1]
            short_idx  = self.results.index[self.results["signal"] == -1]
            exit_idx = self.results.index[(self.results["pos"].shift(fill_value=0) != 0) & (self.results["pos"] == 0)]

            ax1.scatter(long_idx,  nav_norm.loc[long_idx],  marker="^", color="green", s=90, label="Long entry")
            ax1.scatter(short_idx, nav_norm.loc[short_idx], marker="v", color="red",   s=90, label="Short entry")
            ax1.scatter(exit_idx,  nav_norm.loc[exit_idx],  marker="x", color="orange",s=90, label="Exit")

        # -------- Holding secondary axis --------
        ax2 = ax1.twinx()
        ax2.fill_between(self.results.index, self.results["pos"], 0,
                        color="lightgray", alpha=0.3, step="mid")
        ax2.set_ylabel("Position (shares)", color="gray")
        ax2.tick_params(axis="y", labelcolor="gray")


        # ======== ========
        ax1.xaxis.set_major_locator(mdates.MonthLocator(interval=3))   #One major scale every 3 months
        ax1.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
        plt.setp(ax1.get_xticklabels(), rotation=45, ha='right')

        # Merge legend and display
        h1, l1 = ax1.get_legend_handles_labels() 

        #ax1.legend(h1, l1, loc="upper left")
        custom_lines = [Line2D([0],[0],color='limegreen',lw=4,alpha=0.3),

                Line2D([0],[0],color='tomato',   lw=4,alpha=0.3),

                Line2D([0],[0],color='gold',     lw=4,alpha=0.3)]
        #- *绿色底色*：均线向上且斜率分位 >0.8 的上升段 
# - *红色底色*：均线向下且斜率分位 <0.2 的下降段 
# - *黄色底色*（可选）：其余震荡段 

        ax1.legend(h1+l1+custom_lines,
                l1+["Up trend","Down trend","Range"], loc="upper left")


        plt.title("Strategy NAV & Positions (Entries / Exits)")
        plt.tight_layout()        
        plt.show()

        if save_path:
            save_path.parent.mkdir(parents=True, exist_ok=True)
            plt.savefig(save_path, dpi=120, bbox_inches="tight")
            plt.close(fig)            
        else:
            plt.show()

        # return
        return ann_ret, sharpe, dd.max()
        
