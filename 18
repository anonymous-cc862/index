===== In-sample (шонч╗Г) =====
 0    227
-1     12
 1     11
Name: signal, dtype: int64
backtest start: 2023-07-13 00:00:00
open
rv:0.011675481774866745, nav: 1000000.0; cash: 1000000; size_by_risk: 26811.7349508427; size_cap:10434.0
!!!!! size:10434, pos:0
Open: sig: -1.0, pos=-10434, cash=1998936.4207345364, nav=1000000.0, px=95.83442180291625, stop=100.07921348928167, tp=88.75976899230722
open again print******* half:  pos=-10434, cash=1998936.4207345364, nav=1000000.0, px=95.83442180291625, stop=100.07921348928167, tp=88.75976899230722
add
rv:0.011707691828117766, nav: 987211.1750167215; cash: 1998936.4207345364; size_by_risk: 26088.450207394788; size_cap:10181.0
add_position first print **** Open: size: 10181, pos=-20615, cash=2985142.5115842987, nav=987211.1750167215, px=96.96427503525157, stop=100.07921348928167, tp=88.75976899230722
add_position again print ***** *Open: pos=-20615, cash=2985142.5115842987, nav=987211.1750167215, px=96.96427503525157, stop=100.07921348928167, tp=90.09816236207269
Take profit in batches
half:  pos=-10308, cash=2060181.7638205877, nav=1136055.4013940035, px=89.65137392574545, stop=100.07921348928167, tp=90.09816236207269
Trailing Stop Loss
update_trail: stop: 93.28800572844159
Trailing Stop Loss
update_trail: stop: 93.26886841267361
reverse
Close: pos=0, cash=1134853.931792064,  px=89.85778871892106, stop=0, tp=0
rv:0.015010220460907855, nav: 1134853.931792064; cash: 1134853.931792064; size_by_risk: 25241.689691732157; size_cap:12629.0
!!!!! size:12629, pos:0
Open: sig: 1.0, pos=12629, cash=-1094.8959529211818, nav=1134853.931792064, px=89.85778871892106, stop=85.811433062519, tp=96.60171481292447
Open: pos=12629, cash=-1094.8959529211818, nav=1134853.931792064, px=89.85778871892106, stop=85.811433062519, tp=96.60171481292447
_reduce_or_reverse again print***** Open: pos=12629, cash=-1094.8959529211818, nav=1133927.6777059494, px=89.85778871892106, stop=85.811433062519, tp=96.60171481292447
add
rv:0.013081127852448166, nav: 1131123.2493408925; cash: -1094.8959529211818; size_by_risk: -28.00836563644274; size_cap:-13.0
add_position again print ***** *Open: pos=12629, cash=-1094.8959529211818, nav=1131123.2493408925, px=89.6522405015293, stop=85.811433062519, tp=96.60171481292447
Stop loss closing
Close: pos=0, cash=1079522.8896430174,  px=85.65202985834347, stop=0, tp=0
close again print******* half:  pos=0, cash=1079522.8896430174, nav=1093748.8076181065, px=85.65202985834347, stop=0, tp=0
nav=1079522.8896430174
open
rv:0.013242941436585994, nav: 1079522.8896430174; cash: 1079522.8896430174; size_by_risk: 26925.60704185135; size_cap:11885.0
!!!!! size:11885, pos:0
Open: sig: -1.0, pos=-11885, cash=2157892.952033406, nav=1079522.8896430174, px=90.82452771580066, stop=94.43287942043844, tp=84.810608208071
open again print******* half:  pos=-11885, cash=2157892.952033406, nav=1079522.8896430174, px=90.82452771580066, stop=94.43287942043844, tp=84.810608208071
add
rv:0.011361768065882082, nav: 1076692.7958335786; cash: 2157892.952033406; size_by_risk: 31250.734460697997; size_cap:11835.0
add_position first print **** Open: size: 11835, pos=-23720, cash=3233467.865350725, nav=1076692.7958335786, px=90.97182635253071, stop=94.43287942043844, tp=84.810608208071
add_position again print ***** *Open: pos=-23720, cash=3233467.865350725, nav=1076692.7958335786, px=90.97182635253071, stop=94.07262872717217, tp=91.45584701711694
Take profit in batches
half:  pos=-11860, cash=2165716.462660553, nav=1099031.7446883533, px=89.93968954234398, stop=94.07262872717217, tp=91.45584701711694
Trailing Stop Loss
update_trail: stop: 92.99098767273068
Trailing Stop Loss
update_trail: stop: 91.8950709154767
Trailing Stop Loss
update_trail: stop: 91.8950709154767
Trailing Stop Loss
update_trail: stop: 91.1226676539781
Trailing Stop Loss
update_trail: stop: 88.56515723983466
Trailing Stop Loss
update_trail: stop: 86.21331855921576
Trailing Stop Loss
update_trail: stop: 86.21331855921576
reverse
Close: pos=0, cash=1187399.8125019083,  px=82.57132766481867, stop=0, tp=0
rv:0.012817495248298848, nav: 1187399.8125019083; cash: 1187399.8125019083; size_by_risk: 33657.80561826106; size_cap:14380.0
!!!!! size:14380, pos:0
Open: sig: 1.0, pos=14380, cash=-1163.2550100043118, nav=1187399.8125019083, px=82.57132766481867, stop=78.79723759161394, tp=88.86147778682655
Open: pos=14380, cash=-1163.2550100043118, nav=1187399.8125019083, px=82.57132766481867, stop=78.79723759161394, tp=88.86147778682655
_reduce_or_reverse again print***** Open: pos=14380, cash=-1163.2550100043118, nav=1186420.5165558034, px=82.57132766481867, stop=78.79723759161394, tp=88.86147778682655
add
rv:0.01324599181281135, nav: 1155673.7841493497; cash: -1163.2550100043118; size_by_risk: -32.74902727354677; size_cap:-15.0
add_position again print ***** *Open: pos=14380, cash=-1163.2550100043118, nav=1155673.7841493497, px=80.44763832818873, stop=78.79723759161394, tp=88.86147778682655
reverse
Close: pos=0, cash=1247215.236119615,  px=86.90042553886427, stop=0, tp=0
rv:0.01508552452288968, nav: 1247215.236119615; cash: 1247215.236119615; size_by_risk: 28541.733322240874; size_cap:14352.0
!!!!! size:14352, pos:0
Open: sig: -1.0, pos=-14352, cash=2493162.9485460613, nav=1247215.236119615, px=86.90042553886427, stop=91.33797165892153, tp=79.50451533876883
Open: pos=-14352, cash=2493162.9485460613, nav=1247215.236119615, px=86.90042553886427, stop=91.33797165892153, tp=79.50451533876883
_reduce_or_reverse again print***** Open: pos=-14352, cash=2493162.9485460613, nav=1248464.8642388638, px=86.90042553886427, stop=91.33797165892153, tp=79.50451533876883
add
rv:0.014678340308470223, nav: 1189975.9221644914; cash: 2493162.9485460613; size_by_risk: 26784.78436141426; size_cap:13105.0
add_position first print **** Open: size: 13105, pos=-27457, cash=3681930.2084923927, nav=1189975.9221644914, px=90.80177162636357, stop=91.33797165892153, tp=79.50451533876883
add_position again print ***** *Open: pos=-27457, cash=3681930.2084923927, nav=1189975.9221644914, px=90.80177162636357, stop=91.33797165892153, tp=89.84790190159394
Take profit in batches
half:  pos=-13729, cash=2448918.7890023747, nav=1217049.4216143389, px=89.72753786787354, stop=91.33797165892153, tp=89.84790190159394
Trailing Stop Loss
update_trail: stop: 91.33797165892153
Trailing Stop Loss
update_trail: stop: 91.33797165892153
Trailing Stop Loss
update_trail: stop: 91.33797165892153
Trailing Stop Loss
update_trail: stop: 91.16037294707127
Trailing Stop Loss
update_trail: stop: 90.95130657554895
Trailing Stop Loss
update_trail: stop: 90.9158045563995
Trailing Stop Loss
update_trail: stop: 90.19077156714414
Trailing Stop Loss
update_trail: stop: 90.19077156714414
Trailing Stop Loss
update_trail: stop: 90.19077156714414
Trailing Stop Loss
update_trail: stop: 89.72178954221877
Trailing Stop Loss
update_trail: stop: 89.72178954221877
Trailing Stop Loss
update_trail: stop: 88.94641401193759
Trailing Stop Loss
update_trail: stop: 88.41550223708983
Trailing Stop Loss
update_trail: stop: 88.41550223708983
Trailing Stop Loss
update_trail: stop: 88.41550223708983
Stop loss closing
Close: pos=0, cash=1232317.0970582291,  px=88.70416719758185, stop=0, tp=0
close again print******* half:  pos=0, cash=1232317.0970582291, nav=1243171.486079414, px=88.70416719758185, stop=0, tp=0
nav=1232317.0970582291
open
rv:0.013018104537011448, nav: 1232317.0970582291; cash: 1232317.0970582291; size_by_risk: 29737.54767094738; size_cap:12904.0
!!!!! size:12904, pos:0
Open: sig: -1.0, pos=-12904, cash=2463381.1931113107, nav=1232317.0970582291, px=95.49724058009352, stop=99.22681976269689, tp=89.28127527575457
open again print******* half:  pos=-12904, cash=2463381.1931113107, nav=1232317.0970582291, px=95.49724058009352, stop=99.22681976269689, tp=89.28127527575457
reverse
Close: pos=0, cash=1288149.2769376265,  px=91.16617517809844, stop=0, tp=0
rv:0.013647096449466826, nav: 1288149.2769376265; cash: 1288149.2769376265; size_by_risk: 31060.85836659289; size_cap:14129.0
!!!!! size:14129, pos:0
Open: sig: 1.0, pos=14129, cash=-1225.69904281775, nav=1288149.2769376265, px=91.16617517809844, stop=87.43371442134494, tp=97.38694310602094
Open: pos=14129, cash=-1225.69904281775, nav=1288149.2769376265, px=91.16617517809844, stop=87.43371442134494, tp=97.38694310602094
_reduce_or_reverse again print***** Open: pos=14129, cash=-1225.69904281775, nav=1286972.8686131283, px=91.16617517809844, stop=87.43371442134494, tp=97.38694310602094
Take profit in batches
half:  pos=7065, cash=693090.5998847326, nav=1388200.2979070959, px=98.38778457499832, stop=87.43371442134494, tp=97.38694310602094
Trailing Stop Loss
update_trail: stop: 93.759626309261
Trailing Stop Loss
update_trail: stop: 93.84643131125762
Trailing Stop Loss
update_trail: stop: 93.90895368709151
Stop loss closing
Close: pos=0, cash=1350265.2476767604,  px=93.11146217583867, stop=0, tp=0
close again print******* half:  pos=0, cash=1350265.2476767604, nav=1367249.7960695522, px=93.11146217583867, stop=0, tp=0
nav=1350265.2476767604
open
rv:0.012453743740140417, nav: 1350265.2476767604; cash: 1350265.2476767604; size_by_risk: 35240.08912557512; size_cap:14629.0
!!!!! size:14629, pos:0
Open: sig: 1.0, pos=14629, cash=-1347.0643049263876, nav=1350265.2476767604, px=92.30036570727698, stop=89.15729360748455, tp=97.53881920693104
open again print******* half:  pos=14629, cash=-1347.0643049263876, nav=1350265.2476767604, px=92.30036570727698, stop=89.15729360748455, tp=97.53881920693104
Stop loss closing
Close: pos=0, cash=1261091.4047185201,  px=86.38335984651317, stop=0, tp=0
close again print******* half:  pos=0, cash=1261091.4047185201, nav=1307923.5044619709, px=86.38335984651317, stop=0, tp=0
nav=1261091.4047185201
open
rv:0.016714349844952788, nav: 1261091.4047185201; cash: 1261091.4047185201; size_by_risk: 25533.230428984778; size_cap:14225.0
!!!!! size:14225, pos:0
Open: sig: -1.0, pos=-14225, cash=2520858.7043927438, nav=1261091.4047185201, px=88.64874010560465, stop=93.1657393501899, tp=81.12040803129588
open again print******* half:  pos=-14225, cash=2520858.7043927438, nav=1261091.4047185201, px=88.64874010560465, stop=93.1657393501899, tp=81.12040803129588
add
rv:0.016722024877888604, nav: 1302972.5866150844; cash: 2520858.7043927438; size_by_risk: 27303.181938203437; size_cap:15218.0
add_position first print **** Open: size: 15218, pos=-29443, cash=3822458.5039990763, nav=1302972.5866150844, px=85.61589580159293, stop=93.1657393501899, tp=81.12040803129588
add_position again print ***** *Open: pos=-29443, cash=3822458.5039990763, nav=1302972.5866150844, px=85.61589580159293, stop=89.91090922020379, tp=88.85707993822203
Take profit in batches
half:  pos=-14722, cash=2584954.3568712715, nav=1348602.497738248, px=83.97988446766904, stop=89.91090922020379, tp=88.85707993822203
Trailing Stop Loss
update_trail: stop: 87.75372482602887
Trailing Stop Loss
update_trail: stop: 87.69482740372327
Trailing Stop Loss
update_trail: stop: 87.46526691694008
Trailing Stop Loss
update_trail: stop: 86.68693056720141
Trailing Stop Loss
update_trail: stop: 86.68693056720141
Stop loss closing
Close: pos=0, cash=1302781.4561083263,  px=87.17948357017153, stop=0, tp=0
close again print******* half:  pos=0, cash=1302781.4561083263, nav=1337657.567827623, px=87.17948357017153, stop=0, tp=0
nav=1302781.4561083263
open
rv:0.01673013912451899, nav: 1302781.4561083263; cash: 1302781.4561083263; size_by_risk: 25649.91009616525; size_cap:14304.0
!!!!! size:14304, pos:0
Open: sig: -1.0, pos=-14304, cash=2604240.221764684, nav=1302781.4561083263, px=91.07672869012453, stop=95.84845646213437, tp=83.12384907010812
open again print******* half:  pos=-14304, cash=2604240.221764684, nav=1302781.4561083263, px=91.07672869012453, stop=95.84845646213437, tp=83.12384907010812
Stop loss closing
Close: pos=0, cash=1223653.0123829946,  px=96.61417635348502, stop=0, tp=0
close again print******* half:  pos=0, cash=1223653.0123829946, nav=1242016.1822531845, px=96.61417635348502, stop=0, tp=0
nav=1223653.0123829946
open
rv:0.014519612862411147, nav: 1223653.0123829946; cash: 1223653.0123829946; size_by_risk: 23485.522210877476; size_cap:11366.0
!!!!! size:11366, pos:0
Open: sig: -1.0, pos=-11366, cash=2446008.2002908033, nav=1223653.0123829946, px=107.6525397390888, stop=112.32329353692582, tp=99.8679500760271
open again print******* half:  pos=-11366, cash=2446008.2002908033, nav=1223653.0123829946, px=107.6525397390888, stop=112.32329353692582, tp=99.8679500760271
Stop loss closing
Close: pos=0, cash=1167980.1546467557,  px=112.5556354915577, stop=0, tp=0
close again print******* half:  pos=0, cash=1167980.1546467557, nav=1170233.7043311351, px=112.5556354915577, stop=0, tp=0
nav=1167980.1546467557
open
rv:0.013119946912858265, nav: 1167980.1546467557; cash: 1167980.1546467557; size_by_risk: 24138.695394478924; size_cap:10556.0
!!!!! size:10556, pos:0
Open: sig: 1.0, pos=10556, cash=-1100.0454711862535, nav=1167980.1546467557, px=110.6396634928109, stop=106.28490395836435, tp=117.89759605022181
open again print******* half:  pos=10556, cash=-1100.0454711862535, nav=1167980.1546467557, px=110.6396634928109, stop=106.28490395836435, tp=117.89759605022181
add
rv:0.016296847231655767, nav: 1139257.0885164991; cash: -1100.0454711862535; size_by_risk: -18.745058297042263; size_cap:-11.0
add_position again print ***** *Open: pos=10556, cash=-1100.0454711862535, nav=1139257.0885164991, px=108.02928514472201, stop=106.28490395836435, tp=117.89759605022181
Take profit in batches
half:  pos=5278, cash=629563.614187676, nav=1260858.5688011516, px=119.60874471645997, stop=106.28490395836435, tp=117.89759605022181
Trailing Stop Loss
update_trail: stop: 116.05172868932168
Trailing Stop Loss
update_trail: stop: 117.80531071328598
reverse
Close: pos=0, cash=1265835.9567535317,  px=120.67246150391688, stop=0, tp=0
rv:0.012311166818365601, nav: 1265835.9567535317; cash: 1265835.9567535317; size_by_risk: 25561.791895366834; size_cap:10489.0
!!!!! size:10489, pos:0
Open: sig: -1.0, pos=-10489, cash=2530303.672019401, nav=1265835.9567535317, px=120.67246150391688, stop=124.38404342106733, tp=114.48649164199946
Open: pos=-10489, cash=2530303.672019401, nav=1265835.9567535317, px=120.67246150391688, stop=124.38404342106733, tp=114.48649164199946
_reduce_or_reverse again print***** Open: pos=-10489, cash=2530303.672019401, nav=1266472.8660053494, px=120.67246150391688, stop=124.38404342106733, tp=114.48649164199946
reverse
Close: pos=0, cash=1318444.6759211882,  px=115.6518322210296, stop=0, tp=0
rv:0.015933012690031723, nav: 1318444.6759211882; cash: 1318444.6759211882; size_by_risk: 21465.091593570312; size_cap:11400.0
!!!!! size:11400, pos:0
Open: sig: 1.0, pos=11400, cash=-1304.6422858688825, nav=1318444.6759211882, px=115.6518322210296, stop=110.12378588982034, tp=124.86524277304501
Open: pos=11400, cash=-1304.6422858688825, nav=1318444.6759211882, px=115.6518322210296, stop=110.12378588982034, tp=124.86524277304501
_reduce_or_reverse again print***** Open: pos=11400, cash=-1304.6422858688825, nav=1317231.6038530217, px=115.6518322210296, stop=110.12378588982034, tp=124.86524277304501
add
rv:0.016382422504671878, nav: 1293395.9641130655; cash: -1304.6422858688825; size_by_risk: -21.036335234246888; size_cap:-12.0
add_position again print ***** *Open: pos=11400, cash=-1304.6422858688825, nav=1293395.9641130655, px=113.57022863148549, stop=110.12378588982034, tp=124.86524277304501
Stop loss closing
Close: pos=0, cash=1245944.776971544,  px=109.51736115566557, stop=0, tp=0
close again print******* half:  pos=0, cash=1245944.776971544, nav=1274968.990911787, px=109.51736115566557, stop=0, tp=0
nav=1245944.776971544
Average holding days: 32.0  median: 30.5  shortest: 7  longest: 78
Ann return: 24.81%;  Sharpe: 1.11;  MaxDD: 18.15%
#!
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates         
from pathlib import Path

class EnhancedTimingStrategy:
    def __init__(self, daily_returns: pd.Series):
        self.price = self._to_price(daily_returns).rename("price").to_frame()

        # === хЕ╢ф╜ЩхОЯцЬЙхПВцХ░ф╕НхПШ ===
        self.initial_capital = 1_000_000
        self.initial_nav     = self.initial_capital
        self.cost            = {"c": 0.001, "s": 0.0, "t": 0.0}

        # # --- цЦ░хвЮ / х┐ЕшжБхПВцХ░ ---
        # self.lookback_r      = 3     # цФ╢чЫКчОЗчкЧхПгя╝ИтЙИф╕АхСия╝Й
        # self.lookback_slope  = 7      # ч║┐цАзхЫЮх╜ТчкЧхПг
        # self.ema_short       = 3
        # self.ema_long        = 10
        # self.ens_weights     = (1, 0, 0)#(0.5, 0.3, 0.2)  # r5_z, slope7_z, ema_ratio_z цЭГщЗН
        # --- Parameters for existing and new signals ---
        self.lookback_slope = 7      # Slope7: ч║┐цАзхЫЮх╜ТчкЧхПг (Retained)
        
        # Parameters for EMA Crossover Signal (using existing self.ema_short/long)
        self.ema_short_period = 5    # Was self.ema_short
        self.ema_long_period = 30    # Was self.ema_long
        
        # Parameters for ROC with MA Filter Signal
        self.roc_period = 5#10
        self.roc_buy_thresh = 1.0#2.0
        self.roc_sell_thresh = -1 #0.0
        self.roc_ma_filter_period = 10

        # Weights for the three signals in the ensemble:
        # (EMA_Crossover_Z, Slope7_Z, ROC_MA_Filter_Z)
        self.ens_weights = (0, 0,1) # Example: (weight_ema_cross, weight_slope7, weight_roc_ma)
        # ф╕ЛщЭвф┐ЭчХЩхОЯцЬЙ riskуАБvolуАБATR чнЙхПВцХ░я╝ИхжВцЬЙщЬАшжБхПпхИахЗПя╝Й
        self.base_risk = 0.15
        self.stop_atr  = 5
        self.max_drawdown       = 0.4
        self.resume_drawdown    = 0.1
        self.circuit_breaker    = False
        self.stoploss_atr       = 3 #5#2#1
        self.takeprofit_atr     = 5 #6#4#2
        self.cooldown_period    = 5
        self.pct_window         = 30
        self.low_vol_low        = 0.2
        self.high_vol_high      = 0.8
        #self.MAX_WINDOW         = 120


        self.rsi_lookback=5
        self.RSI_pct_high=0.9
        self.RSI_pct_low=0.1

        self.rv_scale_window=21
        # self.ensemble_high=0.2#1#0.3
        # self.ensemble_low=-0.2#1#0.3
        self.ensemble_high=0.5#0.1#0.3
        self.ensemble_low=-0.5#-0.7#-0.1#1#

        self.slope7_threshold=0



    # ---------- helpers ----------
    @staticmethod
    def _to_price(r: pd.Series) -> pd.Series:

        r = r.clip(-0.1, 0.1).replace(0, 1e-6)

        return 100 * (1 + r).cumprod()

    # ---------- indicators ----------

    def calc_indicators(self):

        df = self.price


#rsi
        delta = df["price"].diff()
        # gain, loss = delta.clip(lower=0), -delta.clip(upper=0)
        # rs = gain.rolling(self.rsi_lookback).mean() / (loss.rolling(self.rsi_lookback).mean() + 1e-9)
        # df["RSI"] = 100 - 100 / (1 + rs)

        gain, loss = delta.clip(lower=0), -delta.clip(upper=0)
        #gain_avg=gain.ewm(span=self.rsi_lookback).mean
        rs = gain.ewm(span=self.rsi_lookback).mean() / (loss.ewm(span=self.rsi_lookback).mean() + 1e-9)
        df["RSI"] = 100 - 100 / (1 + rs)

        # ===== (ф┐ЭчХЩхОЯцЭечЪДц│вхКичОЗуАБATR чнЙя╝МхжВф╗НцЬЙщЬАшжБ) =====

        df["ATR"]   = df["price"].diff().abs().ewm(span=14, adjust=False).mean()

        df["RV14"]  = np.log(df["price"]).diff().rolling(14).std() #
        df['RV_pct']  = df['RV14'].rolling(self.pct_window).rank(pct=True)#60-day rolling window quantiles  
        df["VOL_FLOOR"] = df["RV14"].rolling(self.pct_window).quantile(0.20)
        df["VOL_CAP"]   = df["RV14"].rolling(self.pct_window).quantile(0.80)
        df["RSI_pct"] = df["RSI"].rolling(self.pct_window).rank(pct=True)
        # ф╕вцОЙцЪЦцЬ║цЬЯ

        self.df = df.dropna().copy()

        # ц╖╗хКаф╗╖ца╝хРИчРЖцАзцгАцЯе
        assert not df["price"].isnull().any(), "хнШхЬич╝║хд▒ф╗╖ца╝цХ░цНо"
        assert (df["price"] > 0).all(), "хнШхЬищЭЮцнгф╗╖ца╝"
        return df


    # ---------- generate_signals ----------

    def generate_signals(self):

        df = self.df.copy()

        # +1 / -1 / 0я╝Иф╕ЙцАБя╝Йф┐бхП╖


        df["raw_sig"] = np.select(

            [df["RSI_pct"] > self.RSI_pct_high, ###@@

             df["RSI_pct"] < self.RSI_pct_low],
            [-1, 1],
            0
        )

        # хПкцЬЙхПСчФЯч┐╗ш╜мцЧ╢цЙНшзжхПСф║дцШУя╝ИхО╗цКЦя╝Й
       # Only fire on 0тЖТ┬▒1 or ┬▒1тЖТтИУ1 transition
        df["signal"] = df["raw_sig"].where(
            df["raw_sig"].shift(fill_value=0) != df["raw_sig"], 0
        )

        self.signals =  df[["price", "signal", 'RV14', 'VOL_FLOOR', 'VOL_CAP']] 
        print(df["signal"].value_counts())
        print("backtest start:", self.signals.index[0])
        self.signals["signal_trade"] = self.signals["signal"].shift(1).fillna(0) #чФихЙНф╕АхдйчЪДsignalхБЪхРОф╕АхдйчЪДцЙзшбМ
       #self.signals["action_trade"] = self.signals["action"].shift(1).fillna(0) #чФихЙНф╕АхдйчЪДsignalхБЪхРОф╕АхдйчЪДцЙзшбМ
        self.signals["rv_trade"]     = self.signals["RV14"].shift(1).fillna(method='bfill')
        self.signals["floor_trade"]  = self.signals["VOL_FLOOR"].shift(1).fillna(method='bfill')
        self.signals["cap_trade"]    = self.signals["VOL_CAP"].shift(1).fillna(method='bfill')
        return self.signals



    # ----------- backtest ----------
    #T+1     
    def backtest(self):
        running_max = self.initial_capital
        locked = False
        port = {"cash": self.initial_capital, "pos": 0, "stop": 0, "tp": 0,  "half_exit": False,  "trail": 0 , "max_entry": None, 
    "min_entry": None}  
        log = []
        cooldown = 0
        for i, (dt, row) in enumerate(self.signals.iterrows()):
            px= row["price"]
            sig = row["signal_trade"] #, row["signal"]#, row["ATR"]
            #act = row["action_trade"]          # "close" / "open" / "hold"
            rv    = row["rv_trade"]
            floor = row["floor_trade"]
            cap   = row["cap_trade"]

            # # ---------- хЕИхдДчРЖ close-only ----------

            # if act == "close" and port["pos"] != 0:

            #     self._close(port, px)

            #     nav = port["cash"] + port["pos"] * px

            #     log.append({"date": dt, "nav": nav, "pos": 0, "signal": 0})

            #     continue                       # ф╗Кхдйх╖▓х╣│ф╗Уя╝Мф╕НхЖНш┐ЫхЕех╝Аф╗УхИЖцФп


            # ---------- Stop loss closing----------
            if (port["pos"]>0 and px <= port["stop"]) or (port["pos"]<0 and px >= port["stop"]):
                print("Stop loss closing")
                self._close(port, px) #If the stop loss line is reached тЖТ all positions are closed, commissions are settled, and no further reversals are allowed on the same day
                print(f"close again print******* half:  pos={port['pos']}, cash={port['cash']}, nav={nav}, px={px}, stop={port['stop']}, tp={port['tp']}")
                    
                nav  = port["cash"] + port["pos"] * px
                print(f"nav={nav}")
                sig = 0 # The position has been closed on the day and no position will be opened later
                log.append({"date": dt, "nav": nav, "pos": port["pos"], "signal": sig})              
                continue
            
            # ---------- Trailing Stop Loss----------
            if port["pos"] != 0 and port["half_exit"]:
                print("Trailing Stop Loss")
                self._update_trail(port, px, rv) #цЫ┤цЦ░stop 

            # # ===  Take profit in batches: close half of the position when it reaches ┬▒3├ЧATR ===
            if port["pos"] != 0 and not port["half_exit"]:
                reach_tp = (port["pos"]>0 and px >= port["tp"]) or (port["pos"]<0 and px <= port["tp"])
                if reach_tp:
                    half = abs(port["pos"]) // 2
                    print("Take profit in batches")
                    if half:   #halfщЭЮ0              
                        fee = px*half*(self.cost["c"]+self.cost["s"]+(self.cost["t"] if port["pos"]>0 else 0))
                        port["cash"] += half*px-fee if port["pos"]>0 else  -half*px-fee  #half*px - fee if port["pos"]>0 else  -half*px - fee
                        port["pos"]  += -half if port["pos"]>0 else  half
                        port["half_exit"] = True
                        port["trail"] = px # Trailing stop loss starting point, set trail to the current price
                        nav=port["cash"] + port["pos"] * px
                        print(f"half:  pos={port['pos']}, cash={port['cash']}, nav={nav}, px={px}, stop={port['stop']}, tp={port['tp']}")
            
            # ===Opening / Adding / Reversing ===
            nav  = port["cash"] + port["pos"] * px
            if sig != 0 and not locked:
                if port["pos"] == 0: 
                    print("open")
                    nav  = port["cash"] + port["pos"] * px
                    self._open(port, sig, px, rv, i, floor, cap, nav)
                    print(f"open again print******* half:  pos={port['pos']}, cash={port['cash']}, nav={nav}, px={px}, stop={port['stop']}, tp={port['tp']}")
                    
                elif np.sign(sig) == np.sign(port["pos"]): #Add positions in the same direction
                    print('add')
                    nav  = port["cash"] + port["pos"] * px
                    self._add_position(port, sig, px, rv, i, floor, cap, nav)
                    print(f"add_position again print ***** *Open: pos={port['pos']}, cash={port['cash']}, nav={nav}, px={px}, stop={port['stop']}, tp={port['tp']}")
                    
                else: #sig!=0, pos!=0, sig gives the opposite signal to pos # Reverse тЖТ Close the position and reverse
                    print("reverse")
                    nav  = port["cash"] + port["pos"] * px
                    self._reduce_or_reverse(port, sig, px, rv, i, floor, cap, nav)
                    print(f"_reduce_or_reverse again print***** Open: pos={port['pos']}, cash={port['cash']}, nav={nav}, px={px}, stop={port['stop']}, tp={port['tp']}")
                # When encountering a reverse signal, close all positions directly, and then use the new signal to reverse

            nav = port["cash"] + port["pos"] * px
            running_max = max(running_max, nav)

            # --- tripping ---
            if not locked and nav <= running_max * (1 - self.max_drawdown): #
                print("tripping")
                self._close(port, px)      # all close
                locked = True
                cooldown = self.cooldown_period
                locked_peak = running_max   
                running_max = nav           # new baseline nav = running_max

            # --- lock period ---
            if locked:
                print("locked")
                if cooldown > 0:
                    cooldown -= 1
                    log.append({"date": dt, "nav": nav, "pos": port["pos"], "signal": sig})
                    continue  
                else: 
                    locked = False
                    running_max = nav
            log.append({"date": dt, "nav": nav, "pos": port["pos"],     "price": px,
                        "signal": sig})  #

            assert np.isclose(nav, port['cash']+port['pos']*px), 'NAV incorrect'

        #end for loop
        self.results = pd.DataFrame(log).set_index("date")

        # ---------- Trading position holding time statistics ----------
        trades, pos, entry_date = [], 0, None
        for dt, row in self.results.iterrows():
            if pos == 0 and row["pos"] != 0:            
                pos, entry_date = row["pos"], dt
            elif pos != 0 and row["pos"] == 0:          
                trades.append((entry_date, dt, (dt - entry_date).days))
                pos = 0
        if trades:                                     
            lengths = [t[2] for t in trades]
            print(f"Average holding days: {np.mean(lengths):.1f}  "
                f"median: {np.median(lengths):.1f}  "
                f"shortest: {np.min(lengths)}  longest: {np.max(lengths)}")
        else:
            print("The current parameter combination does not generate a complete transaction record")    
        return self.results

    def _update_trail(self, port, px, rv):
        if port["pos"] > 0:
            port["trail"] = max(port["trail"], px)
            port["stop"]  = max(port["stop"], port["trail"] - self.stoploss_atr*rv*px)  # stop хПкшГ╜ф╕Кчз╗
        elif port["pos"] < 0:
            port["trail"] = min(port["trail"], px)
            port["stop"]  = min(port["stop"], port["trail"] + self.stoploss_atr*rv*px)  # stop хПкшГ╜ф╕Лчз╗
        print(f"update_trail: stop: {port['stop']}")

    # ---------- position ----------
    def _position_size(self, px, rv, nav, bar_idx, floor, cap, port):
        rv = np.clip(rv, floor, cap)
        risk_base   = min(nav, port["cash"])  
        risk_dollar = risk_base * self.base_risk 

        # risk_frac   = self.base_risk
        # risk_dollar = nav * risk_frac #min(nav, self.initial_nav) * risk_frac

        per_unit_risk = self.stop_atr * rv * px #Estimated loss per lot
        if per_unit_risk == 0:
            return 0

        size_by_risk = risk_dollar / per_unit_risk #Amount of loss you can afford (0.25% of NAV) ├╖ 1 unit loss = Number of units invested, i.e. size, shares
# e.g. - щжЦцмбхБЪчй║я╝Мф╗╖  100 тЖТ per_unit_risk  = 2 ├Ч 0.01 ├Ч 100 = 2 
#   - size = 2 500 / 2 = 1 250 шВбя╝МхРНф╣Й = 125 000я╝М ш╢ЕщвЭ 
        size_cap     = risk_base  // px
        print(f"rv:{rv}, nav: {nav}; cash: {port['cash']}; size_by_risk: {size_by_risk}; size_cap:{size_cap}")
        return int(max(0, min(size_by_risk, size_cap)))
    
    def _add_position(self, port, sig, px, rv, bar_idx, floor, cap, nav):
        # Add a new position, based on the capital limit and maximum loss capital
        size = self._position_size(px, rv, nav, bar_idx, floor, cap, port) #port["cash"] * self.max_singleцШпцЬАхдЪцКХхдЪх░Сш╡ДщЗСя╝МщЩдф╗еф╗╖ца╝цШпцЬАхдЪцМБф╗У  /  цЬАхдзф║ПцНЯш╡ДщЗСя╝Иport["cash"] *цЬАхдзф║ПцНЯцпФф╛Ля╝Й/ф╗╖ца╝=цМБф╗Уя╝МхЖНщЩдф╗е2щгОцОзх╕╕цХ░я╝Мф╕НшГ╜хдЪф║Ош┐Щф╕кцМБф╗У,ф║МшАЕцЬАх░П
        #cap_left = nav - abs(port["pos"] * px)     
        # size_cap = cap_left // px
        # size = int(min(size, size_cap))

        if size == 0:
            return  # No money, no add
        fee = px * size * (self.cost["c"] + self.cost["s"] + (self.cost["t"] if sig > 0 else 0))
        if sig > 0:                  # хБЪхдЪ
            port["cash"] -= size * px
        else:                        # хБЪчй║
            port["cash"] += size * px
   
        port["cash"] -= fee
        port["pos"] += size if sig > 0 else -size  # Accumulated positions

        print(f"add_position first print **** Open: size: {size}, pos={port['pos']}, cash={port['cash']}, nav={nav}, px={px}, stop={port['stop']}, tp={port['tp']}")
        # After adding positions, reset stop loss/take profit
        if sig>0:
            port["max_entry"] =px if port["max_entry"] is None else max(port["max_entry"], px)
            port["min_entry"] =px if port["min_entry"] is None else min(port["min_entry"], px)
 # 1) stop хПкшГ╜ф╕Кчз╗я╝ЪчФи"хОЖхП▓цЬАщлШф╗╖ - 2ATR"ф╕ОцЧз stop хПЦцЬАхдз
            new_stop=port["max_entry"] - self.stoploss_atr * rv * port["max_entry"]
            port["stop"] = max(port["stop"], new_stop) if port["stop"] else new_stop
            
            # 2) tp хПкшГ╜хдЦцОия╝ЪчФи"хОЖхП▓цЬАф╜Оф╗╖ + 6ATR"ф╕ОцЧз tp хПЦцЬАх░П
            new_tp = port["min_entry"] + self.takeprofit_atr * rv * port["min_entry"]
            port["tp"] = min(port["tp"], new_tp) if port["tp"] else new_tp
        else:        # ----------- чй║хд┤ -----------
            port["min_entry"] = px if port["min_entry"] is None else min(port["min_entry"], px)
            port["max_entry"] = px if port["max_entry"] is None else max(port["max_entry"], px)

            new_stop = port["min_entry"] + self.stoploss_atr * rv * port["min_entry"]
            port["stop"] = min(port["stop"], new_stop) if port["stop"] else new_stop

            new_tp = port["max_entry"] - self.takeprofit_atr * rv * port["max_entry"]
            port["tp"] = max(port["tp"], new_tp) if port["tp"] else new_tp

        port["half_exit"] = False  

    def _reduce_or_reverse(self, port, sig, px, rv, bar_idx, floor, cap, nav):
        # When encountering a reverse signal, close all positions directly, and then use the new signal to reverse
        self._close(port, px)
        nav_after_close = port["cash"]
        #longя╝Мcloseя╝Мnav=nav
        self._open(port, sig, px, rv, bar_idx, floor, cap, nav_after_close)
        # хжВцЮЬтАЬхПкхЗПф╗Уф╕АхНКтАЭя╝МхКаф╗Уф╗гчаБхЖЩцИРя╝Ъ
        # reduce_size = min(abs(port["pos"]), self._position_size(px, port["cash"]))
        # port["pos"] += reduce_size * np.sign(sig)
        print(f"Open: pos={port['pos']}, cash={port['cash']}, nav={nav_after_close}, px={px}, stop={port['stop']}, tp={port['tp']}")
        
    # ---------- open----------
    def _open(self, port, sig, px, rv, bar_idx, floor, cap, nav):
        size = self._position_size(px, rv, nav, bar_idx,floor, cap, port)
        fee = px * size * (self.cost["c"] + self.cost["s"] + (self.cost["t"] if sig > 0 else 0))
        if sig > 0:                  # хБЪхдЪ
            port["cash"] -= size * px
        else:                        # хБЪчй║
            port["cash"] += size * px
   
        port["cash"] -= fee
        print(f"!!!!! size:{size}, pos:{port['pos']}")
        port["pos"] = size if sig > 0 else -size

        port["entry"]      = px                 # Record opening price
        port["half_exit"]  = False              
        port["trail"]      = px                 
        port["stop"] = px - self.stoploss_atr * rv *px if sig > 0 else px + self.stoploss_atr * rv*px
        port["tp"] = px + self.takeprofit_atr * rv *px if sig > 0 else px - self.takeprofit_atr * rv*px
        
        print(f"Open: sig: {sig}, pos={port['pos']}, cash={port['cash']}, nav={nav}, px={px}, stop={port['stop']}, tp={port['tp']}")

    def _close(self, port, px): 
        if port["pos"] > 0:  # хдЪхд┤х╣│ф╗У
            value = port["pos"] * px
            fee = abs(value) * (self.cost["c"] + self.cost["s"] + self.cost["t"])
            port["cash"] += value - fee
        elif port["pos"] < 0:  # чй║хд┤х╣│ф╗У
            value = abs(port["pos"]) * px
            fee = value * (self.cost["c"] + self.cost["s"])  # чй║хд┤ф╣░хЫЮцЧащЬАщвЭхдЦtцИРцЬм
            port["cash"] -= value - fee #+ fee
    
        port.update({"pos":0, "stop":0, "tp":0, "half_exit":False, "trail":0})
        print(f"Close: pos={port['pos']}, cash={port['cash']},  px={px}, stop={port['stop']}, tp={port['tp']}")

    # ---------- performance ---------- 
    def performance (self,save_path: Path | None = None, plot_trades: bool = True):
        ret = self.results["nav"].pct_change().dropna()
        ann_ret = (self.results["nav"].iloc[-1] / self.results["nav"].iloc[0]) ** (252 / len(self.results)) - 1 #ret??
        sharpe = (ret.mean() / ret.std()) * np.sqrt(252) if ret.std() else 0
        dd = (self.results["nav"].cummax() - self.results["nav"]) / self.results["nav"].cummax()
        print(f"Ann return: {ann_ret:.2%};  Sharpe: {sharpe:.2f};  MaxDD: {dd.max():.2%}")

        # -------- NAV  + Benchmark --------
        nav_norm = self.results["nav"] / self.results["nav"].iloc[0]
        bm_norm  = (self.price["price"].reindex(self.results.index)
                            / self.price["price"].reindex(self.results.index).iloc[0])

        fig, ax1 = plt.subplots(figsize=(12, 5))
        ax1.plot(nav_norm, label="Strategy NAV", color="steelblue")
        ax1.plot(bm_norm,  label="Benchmark",     color="gray", alpha=0.6)
        ax1.set_ylabel("Normalized NAV", color="steelblue")
        ax1.tick_params(axis="y", labelcolor="steelblue")

        # -------- marker --------
        if plot_trades:
            long_idx   = self.results.index[self.results["signal"] ==  1]
            short_idx  = self.results.index[self.results["signal"] == -1]
            exit_idx = self.results.index[(self.results["pos"].shift(fill_value=0) != 0) & (self.results["pos"] == 0)]

            ax1.scatter(long_idx,  nav_norm.loc[long_idx],  marker="^", color="green", s=90, label="Long entry")
            ax1.scatter(short_idx, nav_norm.loc[short_idx], marker="v", color="red",   s=90, label="Short entry")
            ax1.scatter(exit_idx,  nav_norm.loc[exit_idx],  marker="x", color="orange",s=90, label="Exit")

        # -------- Holding secondary axis --------
        ax2 = ax1.twinx()
        ax2.fill_between(self.results.index, self.results["pos"], 0,
                        color="lightgray", alpha=0.3, step="mid")
        ax2.set_ylabel("Position (shares)", color="gray")
        ax2.tick_params(axis="y", labelcolor="gray")


        # ======== ========
        ax1.xaxis.set_major_locator(mdates.MonthLocator(interval=3))   #One major scale every 3 months
        ax1.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
        plt.setp(ax1.get_xticklabels(), rotation=45, ha='right')

        # Merge legend and display
        h1, l1 = ax1.get_legend_handles_labels() 
        ax1.legend(h1, l1, loc="upper left")
        plt.title("Strategy NAV & Positions (Entries / Exits)")
        plt.tight_layout()        
        plt.show()

        if save_path:
            save_path.parent.mkdir(parents=True, exist_ok=True)
            plt.savefig(save_path, dpi=120, bbox_inches="tight")
            plt.close(fig)            
        else:
            plt.show()

        # return
        return ann_ret, sharpe, dd.max()
        
