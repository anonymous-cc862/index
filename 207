好的，当然可以。这是一个在量化建模中非常经典的问题，根源在于目标变量的分布不符合常规回归模型的假设。你观察到的XGBoost分位数回归模型对所有样本都预测`1`，这并非程序错误，而是模型忠实地反映了你数据分布的一个关键特征。

下面我们来深入剖析问题的原因，并给出一套更有效的建模方案。

### 1. 根本原因：为什么模型总是预测 `1`？

问题出在你的目标变量 `PM_stability = EOD / SOD` 的数据分布特性，以及分位数回归（Quantile Regression）的工作原理上。

* **`PM_stability` 的分布特征**：在投资组合管理（CIM业务）的实际操作中，对于一个已有的头寸（position），最常见的操作就是**“无操作”**。也就是说，一个基金经理在日初持有的头寸（SOD），到日终时（EOD）很大概率是完全不变的（`EOD == SOD`）。这就导致在你的历史数据中，目标变量 `PM_stability` 的值有海量的样本都精确地等于 `1.0`。特别是当中午的仓位还未发生变化时（`AM_CLOSE == SOD`），下午也保持不变的概率就更高了。

* **分位数回归的原理**：对于给定的分位数 `q`（例如你用的`q=0.7`），分位数回归的目标是找到一个预测值 `ŷ`，使得真实值 `y` 中有70%的样本都小于或等于 `ŷ`。

* **两者结合的结果**：想象一下，对于所有上午仓位未变的股票（`AM_CLOSE / SOD = 1`），我们观察它们最终的 `PM_stability`。可能90%的股票下午仓位也未变（`PM_stability = 1`），5%被卖出（`PM_stability < 1`），另外5%被增持（`PM_stability > 1`）。

    当你要求模型预测70分位数（quantile=0.7）时，模型会观察这个数据分布。由于90%的样本值都小于或等于`1.0`，模型会正确地得出结论：那个能让70%的数据都小于或等于它的临界值，就是`1.0`。模型实际上是学到了“稳定状态大概率会持续稳定”，因此70分位数的预测结果就是`1.0`。

### 2. 解决方案：构建一个两阶段条件模型

这个问题的核心在于，你试图用一个模型同时回答两个本质上不同的问题：
1.  **下午的仓位会发生变化吗？** （这是一个**分类**问题）
2.  **如果发生变化，会变化多少？** （这是一个**回归**问题）

一个更强大、更符合业务逻辑的方法是建立一个两阶段模型，分开处理这两个问题。

---

### 构建更优模型的详细步骤

#### 阶段一：预测下午事件的“类型”（分类模型）

首先，建立一个模型来预测仓位是否会发生变化。在这一步，我们不关心变化的具体幅度，只关心事件的性质。

1.  **创建分类目标变量**：在你的训练数据中，创建一个新的类别标签列，例如叫 `PM_EVENT`。
    * 如果 `EOD == AM_CLOSE`，则 `PM_EVENT` = `'STABLE'` (稳定)
    * 如果 `EOD == 0`，则 `PM_EVENT` = `'CLOSED'` (清仓)
    * 如果 `EOD != AM_CLOSE` 且 `EOD != 0`，则 `PM_EVENT` = `'ADJUSTED'` (调整)

2.  **训练一个分类器**：使用你的特征（`ric`, `SEDOL`, `value`, `SOD`, `AM_CLOSE`, `price_unadj`）来训练一个分类模型（例如 `XGBoost Classifier`, `LightGBM`, 或逻辑回归），让它的预测目标是 `PM_EVENT`。

    **重要的特征工程**：对于这个分类模型，最有效的特征很可能是“上午的稳定性”。你应该明确地创建它：
    * `am_stability = AM_CLOSE / SOD`
    * `is_morning_stable = (AM_CLOSE == SOD)`

#### 阶段二：预测变化的“幅度”（条件分位数回归模型）

现在，我们只对那些真正发生了仓位调整的样本进行建模。

1.  **创建一个筛选后的数据集**：只从你的训练数据中，筛选出 `PM_EVENT` 等于 `'ADJUSTED'` 的那些行，形成一个新的、规模更小的数据集。

2.  **训练你的分位数回归模型**：在这个经过筛选的新数据集上，训练你的XGBoost模型，目标函数依然是 `objective='reg:quantileerror'`，分位数 `quantile_alpha=0.7`。目标变量仍然是 `PM_stability = EOD / SOD`。

    由于这个数据集排除了所有 `PM_stability` 等于 `1` 的“稳定”样本，目标变量的分布会更加多样化，不再被单一值主导。这样，分位数回归模型就能真正学习到仓位在“调整”时内在的模式和幅度分布。

### 如何使用这个两阶段模型进行预测

当一个中午的新测试样本到来时：

1.  **计算特征**：获取该样本的 `ric`, `SEDOL`, `value`, `SOD`, `AM_CLOSE`, `price_unadj` 等数据，并构造 `am_stability` 等特征。
2.  **运行阶段一模型**：将特征输入到你训练好的**分类器**中。模型会预测出最可能的 `PM_EVENT`，例如 `'STABLE'`。
3.  **应用预测逻辑**：
    * **如果预测事件是 `'STABLE'`**：那么你对 `PM_stability` 的预测值就是中午的 `am_stability` 值（很可能就是 `1.0`）。
    * **如果预测事件是 `'CLOSED'`**：那么你对 `PM_stability` 的预测值就是 `0`。
    * **如果预测事件是 `'ADJUSTED'`**：此时，且仅在此时，你才需要将该样本的特征输入到你的**阶段二分位数回归模型**中。这个模型的输出就是你最终需要的 `PM_stability` 的0.7分位数预测值。

### 方法总结

| 步骤 | 模型类型 | 训练数据 | 目标 |
| :--- | :--- | :--- | :--- |
| **阶段一** | 分类模型 | 全量历史数据 | 预测下午的仓位是`稳定`、`清仓`还是`调整`。 |
| **阶段二** | 分位数回归 | **仅包含**仓位被`调整`的数据 | 如果发生调整，预测其最终稳定性的分位数。 |

通过这种分而治之的策略，你为问题的每个环节都建立了专门的模型。这比用一个单一模型“一锅端”要精确得多，也更能产出有价值的业务洞察。



好的，这里提供一份完整的Python代码，以实现我们讨论的两阶段模型思路。

代码将包含以下几个部分：

1.  **数据模拟**：由于我们没有真实数据，将创建一个模拟的DataFrame，它会反映你所描述的数据特征（大量稳定仓位，部分清仓，部分调整）。
2.  **特征工程与目标变量创建**：根据原始数据，生成模型所需的特征和两个目标变量（分类和回归）。
3.  **模型训练**：分别训练阶段一的分类器和阶段二的分位数回归器。
4.  **组合预测**：展示如何将两个模型组合起来，对新数据进行最终预测。
5.  **结果评估**：简单展示模型的表现。

代码中包含了详细的中文注释，以解释每一步的操作。

-----

### 完整Python实现代码

```python
import pandas as pd
import numpy as np
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.preprocessing import LabelEncoder

# --- 1. 数据模拟 ---
# 创建一个与问题描述类似的模拟数据集，以便代码可以独立运行。
# 在实际应用中，请替换成你自己的真实数据加载过程。
print("--- 1. 正在创建模拟数据... ---")
num_samples = 2000
data = {
    'ric': [f'STOCK_{i%100}.HK' for i in range(num_samples)],
    'SOD': np.random.randint(100, 5000, size=num_samples) * 10,
    'price_unadj': np.random.uniform(10, 100, size=num_samples),
    'value': np.random.uniform(0.1, 0.9, size=num_samples)
}
df = pd.DataFrame(data)

# 模拟AM_CLOSE和EOD的行为
am_close_list = []
eod_list = []

for i, sod in enumerate(df['SOD']):
    # 模拟上午的行为
    prob = np.random.rand()
    if prob < 0.8:  # 80%的概率上午仓位不变
        am_close = sod
    elif prob < 0.95: # 15%的概率上午仓位调整
        am_close = sod * np.random.uniform(0.5, 1.5)
    else: # 5%的概率上午清仓
        am_close = 0
    am_close_list.append(int(am_close))

    # 模拟下午的行为（基于上午的结果）
    prob2 = np.random.rand()
    if am_close == 0: # 如果上午已清仓，下午肯定也是0
        eod = 0
    elif prob2 < 0.85: # 85%的概率下午仓位不变 (相对于AM_CLOSE)
        eod = am_close
    elif prob2 < 0.97: # 12%的概率下午仓位调整
        eod = am_close * np.random.uniform(0.5, 1.5)
    else: # 3%的概率下午清仓
        eod = 0
    eod_list.append(int(eod))

df['AM_CLOSE'] = am_close_list
df['EOD'] = eod_list

print("模拟数据创建完成，数据样例如下：")
print(df.head())
print("\n")


# --- 2. 特征工程与目标变量创建 ---
print("--- 2. 正在进行特征工程和目标变量创建... ---")

# 创建核心特征: 上午的稳定性
# 处理分母为0的情况，如果SOD为0，稳定性设为0
df['am_stability'] = (df['AM_CLOSE'] / df['SOD']).fillna(0)

# 创建最终要预测的目标变量: PM稳定性
df['PM_stability'] = (df['EOD'] / df['SOD']).fillna(0)

# 创建阶段一（分类模型）的目标变量 PM_EVENT
def create_pm_event(row):
    # 注意：这里的比较要用浮点数，避免整数精度问题
    if np.isclose(row['EOD'], row['AM_CLOSE']):
        return 'STABLE'
    elif row['EOD'] == 0:
        return 'CLOSED'
    else:
        return 'ADJUSTED'

df['PM_EVENT'] = df.apply(create_pm_event, axis=1)

# 使用LabelEncoder将分类文本转换为数字，以便模型训练
label_encoder = LabelEncoder()
df['PM_EVENT_encoded'] = label_encoder.fit_transform(df['PM_EVENT'])
# 查看编码和类别的对应关系
event_mapping = {index: label for index, label in enumerate(label_encoder.classes_)}
print(f"PM_EVENT类别编码映射: {event_mapping}")
print(df[['AM_CLOSE', 'EOD', 'PM_EVENT', 'PM_EVENT_encoded']].head())
print("\n")


# --- 3. 数据集准备和拆分 ---
print("--- 3. 正在拆分训练集和测试集... ---")
# 定义用于建模的特征列
# 注意：我们去掉了未来信息（EOD, PM_stability, PM_EVENT）和非数值列（ric）
features = ['SOD', 'AM_CLOSE', 'price_unadj', 'value', 'am_stability']

X = df[features]
# 阶段一的目标变量
y_class = df['PM_EVENT_encoded']
# 阶段二的目标变量（以及最终评估的真实值）
y_final_value = df['PM_stability']

# 拆分数据为训练集和测试集
X_train, X_test, y_train_class, y_test_class, y_train_final, y_test_final = \
    train_test_split(X, y_class, y_final_value, test_size=0.25, random_state=42, stratify=y_class)

print(f"训练集大小: {X_train.shape[0]}, 测试集大小: {X_test.shape[0]}")
print("\n")


# --- 4. 阶段一：训练分类模型 ---
print("--- 4. 正在训练阶段一（分类）模型... ---")
# 'ADJUSTED': 0, 'CLOSED': 1, 'STABLE': 2
# 我们的类别是 'ADJUSTED', 'CLOSED', 'STABLE'
adjusted_code = label_encoder.transform(['ADJUSTED'])[0]
closed_code = label_encoder.transform(['CLOSED'])[0]
stable_code = label_encoder.transform(['STABLE'])[0]


xgb_classifier = xgb.XGBClassifier(objective='multi:softmax', num_class=3, use_label_encoder=False, eval_metric='mlogloss', random_state=42)
xgb_classifier.fit(X_train, y_train_class)

# 在测试集上评估分类模型
y_pred_class = xgb_classifier.predict(X_test)
print("阶段一（分类）模型性能报告:")
print(classification_report(y_test_class, y_pred_class, target_names=label_encoder.classes_))
print("\n")


# --- 5. 阶段二：训练分位数回归模型 ---
print("--- 5. 正在训练阶段二（分位数回归）模型... ---")
# **关键步骤**: 只使用训练集中 PM_EVENT 为 'ADJUSTED' 的样本来训练回归模型
adjusted_mask_train = (y_train_class == adjusted_code)
X_train_reg = X_train[adjusted_mask_train]
y_train_reg = y_train_final[adjusted_mask_train]

print(f"用于训练回归模型的数据点数量: {len(X_train_reg)} (只包含'ADJUSTED'样本)")

# 初始化并训练XGBoost分位数回归模型
xgb_regressor = xgb.XGBRegressor(
    objective='reg:quantileerror',
    quantile_alpha=0.7,  # 设置为0.7分位数
    random_state=42
)
xgb_regressor.fit(X_train_reg, y_train_reg)
print("阶段二（分位数回归）模型训练完成。")
print("\n")


# --- 6. 组合两个模型进行最终预测 ---
print("--- 6. 正在组合模型对测试集进行最终预测... ---")
final_predictions = []

# 遍历测试集中的每一个样本
for i in range(len(X_test)):
    sample = X_test.iloc[[i]] # 获取单行样本
    
    # 步骤1: 使用分类模型预测事件类型
    predicted_event_code = xgb_classifier.predict(sample)[0]
    
    # 步骤2: 根据预测的事件类型，决定最终的预测值
    if predicted_event_code == stable_code:
        # 如果预测为'STABLE'，预测值等于当天的am_stability
        prediction = sample['am_stability'].values[0]
    elif predicted_event_code == closed_code:
        # 如果预测为'CLOSED'，预测值为0
        prediction = 0
    else: # predicted_event_code == adjusted_code
        # 如果预测为'ADJUSTED'，使用阶段二的回归模型进行预测
        prediction = xgb_regressor.predict(sample)[0]
        
    final_predictions.append(prediction)

# 将预测结果添加到测试集DataFrame中，方便比较
X_test_results = X_test.copy()
X_test_results['predicted_event'] = label_encoder.inverse_transform(y_pred_class)
X_test_results['true_event'] = label_encoder.inverse_transform(y_test_class)
X_test_results['final_prediction_q70'] = final_predictions
X_test_results['true_PM_stability'] = y_test_final

print("最终预测结果展示 (部分样本):")
print(X_test_results[[
    'am_stability', 
    'true_event', 
    'predicted_event', 
    'true_PM_stability', 
    'final_prediction_q70'
]].head(15))

# 简单计算一下 'ADJUSTED' 类别的预测误差
adjusted_results = X_test_results[X_test_results['predicted_event'] == 'ADJUSTED']
if not adjusted_results.empty:
    mae = np.mean(np.abs(adjusted_results['true_PM_stability'] - adjusted_results['final_prediction_q70']))
    print(f"\n对于被预测为'ADJUSTED'的样本，预测值与真实值的平均绝对误差(MAE): {mae:.4f}")

```

### 如何使用和解读代码

1.  **替换数据**：将代码开头的数据模拟部分 (`--- 1. 数据模拟 ---`) 替换为你自己的数据加载和预处理逻辑。请确保你的DataFrame包含`SOD`, `AM_CLOSE`, `EOD`等必要列。
2.  **特征工程**：`--- 2. 特征工程与目标变量创建 ---` 部分是核心。它创建了我们讨论过的 `am_stability` 和 `PM_EVENT`。你可以根据业务理解，在这里添加更多特征。
3.  **模型训练**：代码会自动训练两个模型。你可以观察阶段一分类模型的性能报告，了解模型在判断“事件类型”上的准确率。一个好的分类器是整个方案成功的基础。
4.  **最终预测**：最重要的部分是 `--- 6. 组合两个模型进行最终预测 ---`。它清晰地展示了如何对一个新样本，先分类，再根据分类结果决定是直接给出答案（0或am\_stability）还是调用回归模型。
5.  **结果解读**：最后输出的表格直观地对比了真实情况和模型的预测路径。你可以看到，当模型预测事件为`STABLE`或`CLOSED`时，它会给出确定的值；当它预测为`ADJUSTED`时，才会给出一个由分位数回归模型计算出的、不确定的、浮动的预测值。这完全符合我们的设计初衷。


好的，完全理解。基于之前的对话内容和您提供的数据截图，我已经清晰地了解了领导布置的任务。

任务的核心是：**利用历史数据，对比分析模型预测的资金稳定性（`value`列）与客户在交易日内的实际资金稳定性，并深入探究上午（AM）和下午（PM）的交易行为模式。**

下面我将为您提供一份完整的 Python 代码，它将引导您完成这个任务。代码中包含了详细的注释，解释了每一步的目的和计算逻辑。

-----

### **第一步：准备工作与数据加载**

首先，请将您所有的每日数据合并成一个文件（例如 `daily_data.csv`），确保文件中包含 `date` 这一列。然后，我们可以使用 `pandas` 来加载和处理数据。

为了让代码可以独立运行和测试，我将首先创建一个与您数据结构类似的模拟 DataFrame。在您的实际操作中，您可以跳过数据模拟部分，直接加载您自己的 CSV 文件。

```python
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# --- 1. 数据加载与准备 ---

# === 模拟数据创建 (您可以替换成自己的数据加载) ===
# 真实场景下，您应该使用这行代码来加载您的数据文件:
# df = pd.read_csv('your_data_file.csv', parse_dates=['date'])

# 为了演示，我们创建一个模拟的DataFrame
data = {
    'date': ['2025-07-15', '2025-07-15', '2025-07-15', '2025-07-16', '2025-07-16', '2025-07-16'],
    'ric': ['000622.SZ', '300391.SZ', '600658.SS', '000622.SZ', '300391.SZ', '600658.SS'],
    'SEDOL': ['6980139', 'BP82BG5', '6089586', '6980139', 'BP82BG5', '6089586'],
    'value': [0.95, 0.80, 0.98, 0.96, 0.82, 0.99], # 模型预测的稳定性
    'SOD': [4400.0, 500.0, 657.0, 4400.0, 800.0, 657.0], # Start of Day 持仓量
    'AM_CLOSE': [4400.0, 200.0, 657.0, 4000.0, 0.0, 600.0],   # AM Close 持仓量
    'EOD': [4400.0, 100.0, 657.0, 3800.0, 0.0, 550.0],     # End of Day 持仓量
    'price_unadj': [0.16, 4.51, 4.75, 0.17, 4.45, 4.80]
}
df = pd.DataFrame(data)
df['date'] = pd.to_datetime(df['date'])
# =======================================================

# 为了代码可读性，将'value'重命名为'model_stability'
df.rename(columns={'value': 'model_stability'}, inplace=True)

print("--- 原始数据预览 ---")
print(df.head())
print("\n")
```

### **第二步：计算日内的关键指标（每笔持仓）**

根据领导的要求，我们需要计算每笔持仓（每一行）的实际稳定性、上午卖出量等指标。

```python
# --- 2. 计算每笔持仓的日内指标 ---

# 避免除以零的错误
def safe_division(numerator, denominator):
    """一个安全的除法函数，分母为0时返回0"""
    return np.divide(numerator, denominator, out=np.zeros_like(numerator, dtype=float), where=(denominator!=0))

# 计算上午和下午的卖出量
df['AM_sell_qty'] = df['SOD'] - df['AM_CLOSE']
df['PM_sell_qty'] = df['AM_CLOSE'] - df['EOD']
df['total_sell_qty'] = df['SOD'] - df['EOD']

# 计算实际的资金稳定性
# 全天实际稳定性 = EOD持仓 / SOD持仓
df['actual_EOD_stability'] = safe_division(df['EOD'], df['SOD'])
# 上午实际稳定性 = AM_CLOSE持仓 / SOD持仓
df['actual_AM_stability'] = safe_division(df['AM_CLOSE'], df['SOD'])
# 下午实际稳定性 = EOD持仓 / AM_CLOSE持仓 (衡量下午时段的稳定性)
df['actual_PM_stability'] = safe_division(df['EOD'], df['AM_CLOSE'])


print("--- 计算日内指标后的数据 ---")
print(df[['date', 'ric', 'model_stability', 'actual_EOD_stability', 'actual_AM_stability', 'actual_PM_stability', 'AM_sell_qty', 'PM_sell_qty']].head())
print("\n")
```

### **第三步：进行每日聚合分析（核心任务）**

领导强调，单个持仓的预测可能不准，但\*\*总体水平（total level）\*\*应该会很接近。因此，我们需要按天聚合，计算每日总体的模型预测稳定性和实际稳定性。

```python
# --- 3. 按天聚合，分析总体水平 ---

# 首先，计算每个持仓的市值（monetary value）
df['SOD_value'] = df['SOD'] * df['price_unadj']
df['EOD_value'] = df['EOD'] * df['price_unadj']

# 按日期分组
daily_grouped = df.groupby('date')

# 计算每日聚合数据
# 1. 计算每日总体的实际稳定性
daily_summary = daily_grouped.agg(
    total_SOD_value=('SOD_value', 'sum'),
    total_EOD_value=('EOD_value', 'sum')
)
daily_summary['agg_actual_stability'] = daily_summary['total_EOD_value'] / daily_summary['total_SOD_value']

# 2. 计算每日总体的模型加权平均稳定性
# 这是衡量模型在总体预测表现的关键指标
# 权重是每个持仓的期初市值
df['weighted_model_stability'] = df['model_stability'] * df['SOD_value']
weighted_model_sum = daily_grouped['weighted_model_stability'].sum()
daily_summary['agg_model_stability'] = weighted_model_sum / daily_summary['total_SOD_value']


print("--- 每日总体稳定性对比分析 ---")
# daily_summary[['agg_model_stability', 'agg_actual_stability']] 现在包含了模型预测和实际情况的每日对比
print(daily_summary[['agg_model_stability', 'agg_actual_stability']])
print("\n")
```

### **第四步：结果可视化与解读**

数据表格虽然精确，但图表能更直观地展示模型性能的趋势和差异。

```python
# --- 4. 结果可视化 ---

plt.style.use('seaborn-v0_8-whitegrid')
fig, ax = plt.subplots(figsize=(12, 6))

daily_summary.plot(
    kind='line',
    y=['agg_model_stability', 'agg_actual_stability'],
    ax=ax,
    marker='o',
    linestyle='--'
)

plt.title('每日模型预测稳定性 vs 实际稳定性', fontsize=16)
plt.ylabel('稳定性 (比例)', fontsize=12)
plt.xlabel('日期', fontsize=12)
plt.legend(['模型预测 (Aggregate Model)', '实际情况 (Aggregate Actual)'], fontsize=10)
plt.ylim(0.8, 1.0) # 根据您的数据范围调整Y轴
plt.grid(True)
plt.show()

```

**如何解读这张图：**
如果两条线非常贴近，说明您的模型在预测每日总体资金稳定性方面做得非常好。如果两条线趋势一致但有固定偏差，可能模型存在系统性高估或低估。如果两条线波动不一致，说明模型可能没有很好地捕捉到影响资金稳定性的关键因素。

### **第五步：深入探索（回答领导的进阶问题）**

领导还希望您探索模型与上午/下午交易行为的关系。例如，**模型预测的稳定性是否与上午的卖出行为有关？**

```python
# --- 5. 进阶探索：模型与日内行为的关联 ---

# 我们可以计算模型稳定性与上午实际稳定性的每日差异
daily_summary['model_vs_AM_diff'] = daily_summary['agg_model_stability'] - daily_grouped.apply(
    lambda x: (x['AM_CLOSE'] * x['price_unadj']).sum() / (x['SOD'] * x['price_unadj']).sum()
)

print("--- 模型预测与上午实际稳定性的差异 ---")
print(daily_summary[['agg_model_stability', 'model_vs_AM_diff']])
print("\n")

print("分析建议：")
print("1. 观察 'model_vs_AM_diff' 列。如果这个差异很大，说明大部分变动发生在上午。")
print("2. 您可以进一步做相关性分析，例如分析 `df['model_stability']` 和 `df['actual_AM_stability']` 的关系，看看模型对上午的预测能力如何。")
print("3. 核心问题：我们能否利用'模型预测'和'上午的实际情况'来更好地预测'下午的行为'？这可能需要您构建一个新的简单模型或进行更复杂的相关性分析。")

```

将以上所有代码块整合起来，您就有了一个完整的分析流程。请根据您的实际数据文件路径和数据情况，微调代码并运行，相信您能出色地完成任务。


好的，您提出的问题非常关键，是机器学习项目实践中一个核心要点：**防止数据泄漏（Data Leakage）**。

您说“feature里面不能出现eod”，这是完全正确的。在预测未来的任务中，我们的特征（features）只能使用预测时间点（中午）及之前已知的信息。

我之前的代码在设计上**遵守了这一原则**：

  * **特征 `X`** (`features = ['SOD', 'AM_CLOSE', 'price_unadj', 'value', 'am_stability']`) 全部基于日初（SOD）和中午（AM\_CLOSE）的数据，**不含任何EOD信息**。
  * **目标 `y`** (`PM_EVENT` 和 `PM_stability`) 是我们希望模型学习去预测的“答案”，它们自然是由 `EOD` 计算得来的。在训练阶段，模型就是通过学习 “已知特征 `X`” 和 “未来答案 `y`” 之间的关系来构建能力的。

可能是我代码的组织方式让这个过程显得有些模糊。为了让整个流程更加清晰，并且彻底杜绝任何误解，我将重构代码，模拟一个更真实的“训练”和“预测”分离的场景。

### 重构后的代码思路

我们将把流程分为三个独立的部分：

1.  **特征工程函数 (`create_features`)**: 一个专门的函数，负责从原始数据中提取在“中午”这个时间点可用的所有特征。
2.  **模型训练脚本 (`train_pipeline`)**: 一个模拟“过去”的脚本，它加载历史数据（包含EOD），调用特征工程函数，并训练两个阶段的模型，最后将训练好的模型（分类器和回归器）保存下来。
3.  **预测脚本 (`prediction_pipeline`)**: 一个模拟“今天中午”的脚本，它只获取当天中午的数据（不包含EOD），调用特征工程函数，加载已保存的模型，并执行最终的预测。

这种结构清晰地表明，在真正的预测环节，`EOD` 是完全未知的。

-----

### 重构后的完整Python代码

```python
import pandas as pd
import numpy as np
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.preprocessing import LabelEncoder
import joblib # 用于保存和加载模型

# --- 0. 数据模拟 ---
# 和之前一样，我们先创建一个模拟的原始数据集
def simulate_data(num_samples=2000):
    print("--- 正在创建模拟数据... ---")
    data = {
        'ric': [f'STOCK_{i%100}.HK' for i in range(num_samples)],
        'SOD': np.random.randint(100, 5000, size=num_samples) * 10,
        'price_unadj': np.random.uniform(10, 100, size=num_samples),
        'value': np.random.uniform(0.1, 0.9, size=num_samples)
    }
    df = pd.DataFrame(data)

    am_close_list, eod_list = [], []
    for i, sod in enumerate(df['SOD']):
        prob_am = np.random.rand()
        am_close = sod if prob_am < 0.8 else (sod * np.random.uniform(0.5, 1.5) if prob_am < 0.95 else 0)
        am_close_list.append(int(am_close))

        prob_pm = np.random.rand()
        eod = 0 if am_close == 0 else (am_close if prob_pm < 0.85 else (am_close * np.random.uniform(0.5, 1.5) if prob_pm < 0.97 else 0))
        eod_list.append(int(eod))

    df['AM_CLOSE'] = am_close_list
    df['EOD'] = eod_list
    return df

# --- 1. 特征工程函数 (严格区分训练和预测) ---
# 这是核心部分，我们定义一个函数来专门处理特征创建
def create_features(df, is_training=True):
    """
    根据原始数据创建特征和目标。
    - is_training=True: 用于模型训练，会创建特征X和目标y。
    - is_training=False: 用于实时预测，只会创建特征X，因为此时EOD未知。
    """
    print(f"特征工程运行模式: {'训练' if is_training else '预测'}")
    
    # 步骤1: 创建所有在预测时点（中午）可用的特征 (Features X)
    # 这些特征的计算绝对不依赖'EOD'
    features_df = pd.DataFrame(index=df.index)
    features_df['SOD'] = df['SOD']
    features_df['AM_CLOSE'] = df['AM_CLOSE']
    features_df['price_unadj'] = df['price_unadj']
    features_df['value'] = df['value']
    # 'am_stability' 只依赖于 SOD 和 AM_CLOSE，是合法的特征
    features_df['am_stability'] = (df['AM_CLOSE'] / df['SOD']).fillna(0)
    
    if not is_training:
        # 如果是预测模式，只返回特征集X
        return features_df
    else:
        # 如果是训练模式，我们还需要创建“答案”（目标y）
        # 步骤2: 创建目标变量 (Target y)，这部分依赖未来信息 'EOD'
        
        # 目标y1: PM_EVENT 分类标签
        def get_pm_event(row):
            if np.isclose(row['EOD'], row['AM_CLOSE']): return 'STABLE'
            if row['EOD'] == 0: return 'CLOSED'
            return 'ADJUSTED'
        
        y_class = df.apply(get_pm_event, axis=1)
        
        # 目标y2: PM_stability 最终回归值
        y_final_value = (df['EOD'] / df['SOD']).fillna(0)
        
        return features_df, y_class, y_final_value

# --- 2. 模型训练管道 (模拟历史操作) ---
def train_pipeline():
    """
    这个函数模拟完整的模型训练、评估和保存过程。
    在真实世界中，这个脚本会在历史数据上定期运行。
    """
    print("\n" + "="*50)
    print("      执行模型训练管道 (train_pipeline)")
    print("="*50)
    
    # 加载历史数据（包含EOD）
    historical_df = simulate_data()
    
    # 创建特征和目标
    X, y_class, y_final_value = create_features(historical_df, is_training=True)
    
    # 编码分类标签
    label_encoder = LabelEncoder()
    y_class_encoded = label_encoder.fit_transform(y_class)
    joblib.dump(label_encoder, 'label_encoder.pkl') # 保存编码器以备后用
    
    # 数据拆分
    X_train, X_test, y_train_class, y_test_class, y_train_final, y_test_final = \
        train_test_split(X, y_class_encoded, y_final_value, test_size=0.25, random_state=42, stratify=y_class_encoded)
        
    # === 训练阶段一：分类器 ===
    print("\n--- 训练阶段一分类器 ---")
    xgb_classifier = xgb.XGBClassifier(objective='multi:softmax', num_class=len(label_encoder.classes_), use_label_encoder=False, eval_metric='mlogloss', random_state=42)
    xgb_classifier.fit(X_train, y_train_class)
    joblib.dump(xgb_classifier, 'xgb_classifier.pkl') # 保存模型

    # === 训练阶段二：回归器 ===
    print("\n--- 训练阶段二回归器 ---")
    adjusted_code = label_encoder.transform(['ADJUSTED'])[0]
    adjusted_mask_train = (y_train_class == adjusted_code)
    X_train_reg = X_train[adjusted_mask_train]
    y_train_reg = y_train_final[adjusted_mask_train]
    
    xgb_regressor = xgb.XGBRegressor(objective='reg:quantileerror', quantile_alpha=0.7, random_state=42)
    xgb_regressor.fit(X_train_reg, y_train_reg)
    joblib.dump(xgb_regressor, 'xgb_regressor.pkl') # 保存模型
    
    print("\n模型训练完成并已保存到本地文件 (classifier, regressor, encoder)。")
    print("="*50)

# --- 3. 实时预测管道 (模拟当天中午操作) ---
def prediction_pipeline(new_data):
    """
    这个函数模拟当天的实时预测流程。
    它接收不包含'EOD'列的新数据。
    """
    print("\n" + "="*50)
    print("      执行实时预测管道 (prediction_pipeline)")
    print("="*50)
    
    if 'EOD' in new_data.columns:
        raise ValueError("预测数据中不能包含'EOD'列，防止数据泄漏!")
        
    # 加载已训练好的模型和编码器
    print("--- 加载已保存的模型 ---")
    xgb_classifier = joblib.load('xgb_classifier.pkl')
    xgb_regressor = joblib.load('xgb_regressor.pkl')
    label_encoder = joblib.load('label_encoder.pkl')
    
    # 从新数据中创建特征（注意 is_training=False）
    X_new = create_features(new_data, is_training=False)
    
    # 执行两阶段预测
    print("\n--- 执行两阶段预测 ---")
    # 1. 预测事件类型
    predicted_event_codes = xgb_classifier.predict(X_new)
    
    # 获取类别编码
    adjusted_code = label_encoder.transform(['ADJUSTED'])[0]
    closed_code = label_encoder.transform(['CLOSED'])[0]
    stable_code = label_encoder.transform(['STABLE'])[0]
    
    # 2. 根据类型进行最终预测
    final_predictions = []
    for i in range(len(X_new)):
        event_code = predicted_event_codes[i]
        sample_features = X_new.iloc[[i]]
        
        if event_code == stable_code:
            prediction = sample_features['am_stability'].values[0]
        elif event_code == closed_code:
            prediction = 0
        else: # ADJUSTED
            prediction = xgb_regressor.predict(sample_features)[0]
        final_predictions.append(prediction)
        
    return final_predictions

# --- 主程序 ---
if __name__ == "__main__":
    # 步骤一：运行训练管道，生成并保存模型
    train_pipeline()
    
    # 步骤二：模拟当天中午接收到的一批新数据（注意：没有EOD列！）
    print("\n--- 模拟接收当天中午的新数据（不含EOD）---")
    today_data = simulate_data(num_samples=5)
    
    # 为了验证，我们偷偷保存一下真实答案
    true_answers = (today_data['EOD'] / today_data['SOD']).fillna(0)
    
    # 把EOD列去掉，模拟真实预测场景
    today_data_without_eod = today_data.drop(columns=['EOD'])
    print("待预测的新数据样例如下 (无EOD列):")
    print(today_data_without_eod)
    
    # 步骤三：运行预测管道
    predictions = prediction_pipeline(today_data_without_eod)
    
    # 显示最终结果
    result_df = today_data_without_eod.copy()
    result_df['PREDICTED_PM_stability_q70'] = predictions
    result_df['(TRUE_PM_stability_for_verification)'] = true_answers
    
    print("\n--- 最终预测结果 ---")
    print(result_df)

```

### 代码重构的核心改进

1.  **功能模块化**：`create_features`, `train_pipeline`, `prediction_pipeline` 三个函数各司其职，清晰地分离了特征工程、模型训练和实时预测，这在生产环境中是更标准的做法。
2.  **严格防止泄漏**：`create_features`函数中的 `is_training` 参数是关键。它确保了在调用预测流程时，程序逻辑上**完全无法**接触到`EOD`信息来构建特征。`prediction_pipeline`函数的入口也增加了检查，如果传入了含`EOD`的数据会直接报错。
3.  **模型持久化**：使用 `joblib` 来保存和加载训练好的模型 (`.pkl`文件)。这模拟了真实的部署场景：你只需要训练一次模型，之后就可以反复加载它来服务于成千上万次的预测请求，而无需重新训练。

这个重构后的版本，逻辑更严谨，代码结构更清晰，彻底解决了您关于特征构造中可能存在数据泄漏的担忧。
