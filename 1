import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

class TimingStrategy:
    def __init__(self, daily_returns, weekly_returns):
        # 数据预处理：将返回的Series转换为DataFrame并命名列为'price'
        self.daily_price = self._returns_to_price(daily_returns).to_frame(name='price')  # 修改点1
        self.weekly_price = self._returns_to_price(weekly_returns).to_frame(name='price') # 修改点2
        
        # 参数设置
        self.initial_capital = 1_000_000
        self.risk_per_trade = 0.01
        self.stop_loss_multiplier = 2
        self.trading_cost = 0.001

    def _returns_to_price(self, returns):
        """将收益率序列转换为DataFrame格式的价格序列"""
        return 100 * (1 + returns).cumprod()

    def calculate_indicators(self):
        """计算所有技术指标"""
        # 周线趋势指标（确保操作的是DataFrame）
        self.weekly_price['MA10'] = self.weekly_price['price'].rolling(10).mean()
        
        # 日线指标
        df = self.daily_price.copy()
        # 双均线
        df['MA5'] = df['price'].rolling(5).mean()
        df['MA20'] = df['price'].rolling(20).mean()
        # RSI
        delta = df['price'].diff()
        gain = delta.where(delta > 0, 0)
        loss = -delta.where(delta < 0, 0)
        avg_gain = gain.rolling(14).mean()
        avg_loss = loss.rolling(14).mean()
        rs = avg_gain / avg_loss
        df['RSI'] = 100 - (100 / (1 + rs))
        # MACD
        exp12 = df['price'].ewm(span=12, adjust=False).mean()
        exp26 = df['price'].ewm(span=26, adjust=False).mean()
        df['MACD'] = exp12 - exp26
        df['Signal'] = df['MACD'].ewm(span=9, adjust=False).mean()
        # 波动率替代指标
        df['Volatility'] = df['price'].pct_change().rolling(20).std()
        
        self.daily_indicators = df

    def generate_signals(self):
        """生成交易信号"""
        df = self.daily_indicators.copy()
        # 对齐周线数据（填充方法调整）
        weekly_ma10 = self.weekly_price['MA10'].reindex(df.index, method='ffill')
        df['Weekly_Trend'] = np.where(df['price'] > weekly_ma10, 1, -1)  # 修改点3
        
        # 日线信号
        df['MA_Cross'] = np.where(df['MA5'] > df['MA20'], 1, -1)
        df['RSI_Signal'] = np.where(df['RSI'] < 30, 1, np.where(df['RSI'] > 70, -1, 0))
        df['MACD_Signal'] = np.where(df['MACD'] > df['Signal'], 1, -1)
        
        # 综合信号
        df['Long_Signal'] = ((df['Weekly_Trend'] == 1) & 
                           (df[['MA_Cross','RSI_Signal','MACD_Signal']].sum(axis=1) >= 2)).astype(int)
        df['Short_Signal'] = ((df['Weekly_Trend'] == -1) & 
                            (df[['MA_Cross','RSI_Signal','MACD_Signal']].sum(axis=1) <= -2)).astype(int)
        return df

    # 其余方法保持不变...

# 使用示例
if __name__ == '__main__':
    # 生成示例数据（确保数据类型正确）
    dates = pd.date_range('2020-01-01', periods=500)
    daily_returns = pd.Series(np.random.normal(0.0005, 0.01, 500), index=dates)
    weekly_returns = daily_returns.resample('W-FRI').apply(lambda x: (1+x).prod()-1)
    
    strategy = TimingStrategy(daily_returns, weekly_returns)
    strategy.calculate_indicators()  # 必须先计算指标
    results = strategy.backtest()
    
    print(f"Final Portfolio Value: {results['value'].iloc[-1]:,.2f}")
    strategy.plot_results(results)
